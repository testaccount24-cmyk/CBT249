         MACRO                                                 @BBDJ10X
         DFHIRPD  ,                                            @BBDJ10X
.**********************************************************************
.*                                                                    *
.* MACRO NAME = DFHIRPD                                               *
.*                                                                    *
.* DESCRIPTIVE NAME = INTER-REGION COMMUNICATION PROGRAM DSECTS       *
.*                                                                    *
.*  COPYRIGHT = 5655-018 (C) COPYRIGHT IBM CORP. 1979  1994           *
.*              THIS MODULE IS "RESTRICTED MATERIALS OF IBM"          *
.*              LICENSED MATERIALS - PROPERTY OF IBM                  *
.*              REFER TO COPYRIGHT INSTRUCTIONS                       *
.*              FORM NUMBER G120-2083                                 *
.*                                                                    *
.* STATUS = 4.1.0                                                     *
.*                                                                    *
.* CHANGE ACTIVITY :                                                  *
.*  $MAC(DFHIRPD) COMP(IRC) PROD(CICS/ESA)   :                        *
.*                                                                    *
.*   PN= REASON REL YYMMDD HDXIII : REMARKS                           *
.*  $D1= I01597 170 8402   HD0EGA : REWORK DCR                        *
.*  $D2= I03170 310 870904 HD5LL  : MRO BATCHING                      *
.*  $L1= J31    160 8204   HD8STC : FIX RECOVERY ERRORS IN IRP        *
.*  $L2= J41    161 8210   HD0RJS : CROSS MEMORY SUPPORT              *
.*  $L3= J45    170 8508   HD1MA  : SUPPORT VAE (VSE)                 *
.*  $L4= 504    320 890410 HD2UJAH: 31 bit support for IRP cntrl blks *
.*  $L5= 415    320 8909   HD2YAIH: SUPPORT INTER REGION WORK EXITS   *
.*   $L6= 660    410 921110 HD5KASR : Add EXCI support                *
.*  $L8= 641    410 930203 HD5LL  : XCF, dynamic ADD & EXCI sup@BA58600
.*   $L9= 641    410 930518 HD2AIGR : XCF macros                     *
.*   $LA= 641    410 930728 HD2YAIH : handle XCFBUSY conditions      *
.*  $P1= M32244 170 860226 HD1MA  : CORRECT ATTACH FOR ICCF           *
.*  $P2= M56295 310 890626 HD0VCAP: New exits (eg to simulate XM post)*
.*  $P3= M90378 330 910702 HD2JPEH: FESTAE parameter list             *
.*  $P4= M91572 330 911206 HD2JPEH: Symbolic value for maximum logons *
.*   $P5= M83382 410 930924 HDATPMH : Move SCTE to DFHSABDS           *
.*                                                                    *
.**********************************************************************
.* * *         G L O B A L   D E F I N I T I O N S                * * *
.**********************************************************************
         GBLB  &MVS        MVS INDICATOR                       @BBDJ10X
         DFHEJECT
         SPACE 2
***********************************************************************
* *      SUBPOOL DEFINITION AND USAGE.                              * *
***********************************************************************
         SPACE 1
.*** SP129    EQU   129                 LARGE  DELETED BY APAR @BA58600
.*** SP130    EQU   130                 SMALL  DELETED BY APAR @BA58600
SPXSQC   EQU   252                 XCF small quick-cells       @BA58600
SPXLQC   EQU   252                 XCF large quick-cells       @BA58600
SP231    EQU   231 - CSA, CICS KEY, FETCH PROTECTED
SPLQC      EQU   SP231     LARGE QUICK CELLS                   @BM14248
         SPACE 1                                               @BM14248
SP241    EQU   241 - CSA, CICS KEY, NON-FETCH PROTECTED        @BM14248
SPSQC      EQU   SP241     SMALL QUICK CELLS                   @BM14248
SPLCB      EQU   SP241     LCB & CCB                           @BM14248
SPSCTE     EQU   SP241     SCTE & SSVT                         @BM14248
SPLACB     EQU   SP241     LACB                                @BM14248
SPSUDB     EQU   SP241     SUDB                                @BM14248
         SPACE 1                                               @BM14248
SP230    EQU   230 - Private,task related,requestor key,non fetch prot F
                                                                   @D2A
SPSAVE   EQU   230         WORK SPACE AREA, SUDB & SRB             @LBC
SPLCBX   EQU   SP230               Subpool for XCF blocks      @BA58600
SP245    EQU   245 - SQA, KEY 0, NON-FETCH PROTECTED SUBPOOL   @BM14248
SPSRB      EQU   SP245     SRB                                 @BM14248
.*** SPSQA    EQU   SP245                      DELETED BY APAR @BA58600
SPTQE    EQU   SP245                                               @LAA
         SPACE 1                                               @BM14248
SP251    EQU   251 - TASK-LOCAL, CICS KEY, FETCH PROTECTED     @BM14248
SPSLCB     EQU   SP251     SLCB, SCACB & SCCB                  @BM14248
         SPACE 1                                               @BM14248
.*** SP252    EQU   252 - TASK-LOCAL, KEY 0, N DELETED BY APAR @BA58600
SPSSOB     EQU   SP230     SSOB & SSIB                         @BM14248
SPLCL      EQU   SP230     COPY OF LOGON CONNECTION LIST           @LBC
         SPACE 1                                               @BM14248
.*** SP253    EQU   253 -LSQA TASK RELATED, KE DELETED BY APAR @BA58600
SPUCA      EQU   SP241     USE COUNT ARRAY                 @FJ410R @L3A
         DFHEJECT
***********************************************************************
* * * *                                                         * * * *
* * * *  THE FOLLOWING DSECTS DEFINE THE CONTROL BLOCKS USED    * * * *
* * * *  INTERNALLY BY THE INTER-REGION PROGRAM ONLY.  THEY     * * * *
* * * *  ARE NOT USED BY ANY OTHER PROGRAMS AND THEIR FORMAT    * * * *
* * * *  IS NOT PART OF ANY EXTERNAL INTERFACE.                 * * * *
* * * *                                                         * * * *
* * * *  THE DSECTS INCLUDED  ARE:                              * * * *
* * * *                                                         * * * *
* * * *  SUDB     SUBSYSTEM USER DEFINITION BLOCK               * * * *
* * * *  LACB(E)  LOGON ADDRESS CONTROL BLOCK                   * * * *
* * * *  LCB(E)   LOGON CONTROL BLOCK                           * * * *
* * * *  CCB      CONNECTION CONTROL BLOCK                      * * * *
* * * *  CSB      CONNECTION STATUS BLOCK                       * * * *
* * * *                                                         * * * *
***********************************************************************
         SPACE 5                                               @BBDJ10X
         DFHEJECT                                              @BBDJ10X
***********************************************************************
* * *                                                             * * *
* * *          SUBSYSTEM USER DEFINITION CONTROL BLOCK            * * *
* * *                                                             * * *
* * *    THE SUDB IS USED BY THE SVC TO REPRESENT THE             * * *
* * *    CONNECTION BETWEEN A TASK USING THE SVC AND THE          * * *
* * *    SVC CONTROL BLOCKS.                                      * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                               @BBDJ10X
SUDB     DSECT                                                 @BBDJ10X
SUDBCHN  DS    A           ADDRESS OF NEXT SUDB                @BM13339
SUDBLACB DS    A           ADDRESS OF LACB                     @BBDJ10X
SUDBUID  DS    D           USER IDENTIFICATION                 @BBDJ10X
         ORG   SUDBUID                                         @BBDJ104
SUDBTCB  DS    A           Address of owning TCB               @BBDJ104
         DS    H                                               @BBDJ104
SUDBASID DS    H                   ASID of owning address space@BBDJ104
SUDBJSDB DS    A           Pointer to job-step life-time SUDB      @L8A
SUDBASCB DS    A           ADDRESS OF THE ASCB                 @BBDJ104
SUDBJSB  DS    A           Pointer to IRP job-step block           @L8A
SUDBAWS  DS    A           Address of working storage          @BM14268
SUDBLCB  DS    A           ADDRESS OF FIRST OR ONLY LCB        @BBDJ10X
SUDBECB  DS    F           ECB for IRWAITLK/X & IRWAITFP           @L8A
SUDBTARG DS    A           LG of target LACBE (IRSETFP)    @FJ410R @L2C
SUDBSR   DS    F           SRB SCHEDULE RECOVERY DATA. CONTAINS    @D1A
*                          ..TARGET LG WHILE SRB BEING SCHEDULED
         SPACE 1                                               @BBDJ10X
SUDBUCA  DS    A           Pointer to XM UCA (job-step SUDB)       @L8A
SUDBAXR# DS    H           No. of AXs required for AXRES (one)     @L8A
SUDBAX   DS    H           XM authorization index (job-step SUDB)  @L8A
SUDBJLLG DS    F           Index & generation no. of life of job-step  X
                           LACBE                                   @L8A
         SPACE 1                                               @BM14268
SUDBAUDT DS    0XL12          AUDIT FIELDS                     @BA63731
SUDBRCCB DS    A           Current request's CCB ptr. for recov@BA58600
SUDBRLCB DS    A           Current request's LCB ptr. for recov@BA63731
SUDBAFL1 DS    X           .. AUDIT FLAG 1                     @BBDJ10X
SUDBAFPS EQU   X'80'               Foot-print is definitely set@BA58600
*        EQU   X'40'          .. reserved                      @BBDJ10X
*        EQU   X'20'          .. reserved
*        EQU   X'10'          .. reserved                      @BBDJ10X
*        EQU   X'08'          .. reserved
SUDBAFL2 DS    X           .. AUDIT FLAG 2                     @BM14095
SUDBAEOM EQU   X'80'          .. EOM EXIT ACTIVE (MVS ONLY)        @L3C
SUDBAXMA EQU   X'40'               XM initialization / termination     X
                                   active                          @L8A
         DS    XL2         .. RESERVED                         @BM14095
         DS    0S(*-SUDBAUDT-L'SUDBAUDT,L'SUDBAUDT+SUDBAUDT-*) @BA63731
.*** SUDBWORK DS    2F          WORK AREA      DELETED BY APAR @BA63731
SUDBSAV2 DS    4F          LEVEL 2 SAVE AREA                   @BM14268
SUDBALN  DS    0D                                              @BBDJ10X
         SPACE 1                                               @BBDJ10X
SUDBLEN  EQU   *-SUDB      LENGTH OF SUDB                      @BBDJ10X
         SPACE 2                                               @BBDJ10X
***********************************************************************
* * *                                                             * * *
* * *          WORK AREA AT END OF THE SRB USED BY SRB PROCESSING * * *
* * *     RATHER THAN THE SUDB SAVE AREA.                         * * *
* * *                                                             * * *
***********************************************************************
         DFHEJECT ,
***********************************************************************
*        Quick cell DSECTS                                            *
***********************************************************************
         SPACE 1
QCCTL    DSECT ,                   Quick cell anchor               @L8A
QCELM    DC    H'16'               Size of element                 @L8A
QCSP#    DC    Y(SPSQC)            subpool #                       @L8A
QCSTOR   DC    F'512'              size of block for getmain       @L8A
QC#CELL  DC    Y(X'1F')            Number of cells in block        @L8A
         DC    H'0'                Reserved                        @L8A
QCFREE   DC    A(0)                storage blocks for freeing      @L8A
         DS    0D                  align for CDS                   @L8A
QCSEC    DC    F'0'                security count                  @L8A
QCANCH   DC    A(0)                anchor of blocks                @L8A
         SPACE 1
QCCLEN   EQU   *-QCCTL             length of quick cell ctl. blk.  @L8A
         SPACE 3
***********************************************************************
*  Index values corresponding to different types of small quick-cell  *
***********************************************************************
QCIXMXWS EQU   1                   Message Exit Working Storage    @L8A
QCIXPHB  EQU   2                   Partner History Block           @L8A
QCIXS#HE EQU   3                   Session Numbers Handled Element @L8A
QCIXMQE  EQU   4                   Message Queue Element           @L8A
QCIIRRXE EQU   5                   XCFBUSY Deferred msg element    @LAA
QCIXMAX  EQU   5                   Maximum small quick-cell index  @LAC
         SPACE 3
QCBLK    DSECT ,                   Quick cell block                @L8A
QCCHAINF DC    A(0)                forward chain                   @L8A
         DC    A(0)                reserved - wasn't used !!!      @L8A
QCCHAIN  DS    0A                  start of cell entries           @L8A
         SPACE 3
QCELL    DSECT ,                   Cell element                    @L8A
QCELLNX  DS    A                   next cell                       @L8A
QCELST   DS    0F                  start of data                   @L8A
         DFHEJECT
***********************************************************************
*        Job Step Block                                               *
***********************************************************************
JSB      DSECT                     IRP job-step block              @L8A
JSBSP    EQU   252                 Subpool for job-step block - must   X
                                   be allocated to ACSBXTCB by branch  X
                                   entry to GETMAIN in case DFHIRP     X
                                   runs under a TCB ATTACHEd with      X
                                   JSTCB=YES                       @L8A
JSBSCTE  DS    A                   Pointer to SCTE if this JSB is      X
                                   included in SCTECNT; zero if not@L8A
JSBEOMRT DS    F                   Token for EOM resource manager so   X
                                   that it can be deleted at EOT   @L8A
JSBEOTRT DS    F                   Token for ASCBXTCB's EOT resource   X
                                   manager                     @BA63731
JSBXCFTR DS    A                   Pointer to XCF Trace Table      @L8A
JSB#LCBS DS    F                   No. of LCBs in address space    @L8A
JSBTSW#L DS    F                   TRANSWAP use count - no. of LCBs    X
                                   requiring non-swappability      @L8A
JSBUCA#L DS    F                   UCA & AX use count - no. of LCBs    X
                                   with any XM-capable LCBEs       @L8A
JSBETL#L DS    F                   ET & LX use count - no. of LCBs     X
                                   that are allowed to use PC for XCF  X
                                   or having any XM-capable LCBEs  @L8A
JSBETTKN DS    F                   XM entry table token            @L8A
JSBLX    DS    H                   XM linkage index                @L8A
JSBXMFLG DS    X                   XM flags                        @L8A
JSBXMTSW EQU   X'80'               TRANSWAP completed successfully @L8A
JSBXMLLG EQU   X'40'               XM-owning LACBE fully allocated @L8A
JSBXMETC EQU   X'20'               Entry table is connected        @L8A
.*** JSBXMETH EQU   X'10'               ENTRY  DELETED BY APAR @BA63731
.***                                    LX MUS DELETED BY APAR @BA63731
         DS    X                   Reserved                        @L8A
*** JSBUSRID DS    CL8                    @L8A DELETED BY APAR @BA58600
         SPACE 2
JSBQCA   DS    (QCIXMAX)A          Array of pointers to control areas  X
                                   for small quick-cells           @L8A
JSBLQCA  DC    A(JSBLQCAN)         ptr. to Large quick cell anch.  @L8A
         DS    0D                  align for CDS                   @L8A
JSBQCAN  DS    (QCIXMAX)XL(QCCLEN) Array of control areas for small    X
                                   quick-cells                     @L8A
         SPACE 1
         DS    0D                  align for CDS fields            @L8A
JSBLQCAN DS    (LQCCTLEN)X         Control area for large quick-cells  X
                                                                   @L8A
         SPACE 1
JSBL     EQU   *-JSB               Length of job-step block        @L8A
         DFHEJECT                                              @BBDJ10X
***********************************************************************
* * *                                                             * * *
* * *          LOGON ADDRESS CONTROL BLOCK                        * * *
* * *                                                             * * *
* * *    THE LACB IS USED BY THE INTER-REGION PROGRAM AS AN       * * *
* * *    INDEX TABLE OF ADDRESSES OF LCBS.  EACH LOGON ADDRESS    * * *
* * *    CONTROL BLOCK ENTRY (LACBE) REPRESENTS ONE ENTRY IN      * * *
* * *    THE TABLE.  THE TABLE IS INDEXED BY THE LACBE INDEX      * * *
* * *    NUMBER WHICH IS STORED IN THE CCB FOR EACH ACTIVE        * * *
* * *    CONNECTION.                                              * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                               @BBDJ10X
LACB     DSECT                                                 @BBDJ10X
LACBLEN  DS    F           TOTAL LENGTH OF LACB                @BBDJ10X
LACBNE   DS    H           NUMBER OF LACB ENTRIES              @BBDJ10X
LACBMAXU DS    H           Maximum number of XM users allowed      @L8A
         DS    F           Reserved                                @L8C
LACBSUDB DS    A           SUDB CHAIN ANCHOR                   @BBDJ10X
LACBSCTE DS    A           ADDRESS OF SCTE                     @BBDJ10X
         SPACE 1                                               @BBDJ10X
LACBQCA  DC    A(LACBQCAN)         pointer to Quick cell anchor    @L8A
LACBLQCA DC    A(LACBLQCN)         pointer to Large quick cell anc @L8A
         DS    0D                  align for CDS                   @L8A
LACBQCAN DS    (QCCLEN)X           Quick cell anchor               @L8A
         SPACE 1                                               @BBDJ10X
         DS    0D                  align for CDS fields            @L8A
LACBLQCN DS    (LQCCTLEN)X         Large quick cell anchor         @L8A
         SPACE 1
LACB#USR EQU   2047                Number of usable LACBEs         @L8A
LACBENTY DS    0D          START OF ENTRIES                    @BBDJ104
         SPACE 3                                               @BBDJ10X
***********************************************************************
* *                                                                 * *
* *            LOGON ADDRESS CONTROL BLOCK ENTRY                    * *
* *                                                                 * *
* *      EACH LACBE CONTAINS INFORMATION PERTINENT TO ONE USER      * *
* *      WHO HAS LOGGED ON.  IT CONTAINS THE USER'S NAME, THE       * *
* *      ADDRESS OF THE LCB AND THE CONTROLLING FOOTPRINT STRIP.    * *
* *                                                                 * *
***********************************************************************
         SPACE 1                                               @BBDJ10X
LACBE    DSECT                                                 @BBDJ10X
LACBENM  DS    CL8         USERID FOR THIS LOGON               @BBDJ10X
LACBELG  DS    0F          LACBE INDEX & GENERATION NUMBERS    @BBDJ10X
LACBEL   DS    H           .. LACBE INDEX NUMBER               @BBDJ10X
LACBEG   DS    H           .. GENERATION NUMBER                @BBDJ10X
LACBELCB DS    A           ADDRESS OF LCB                      @BBDJ10X
LACBEST1 DS    X           STATUS BYTE 1                       @BA58600
*   The value of status byte 1 specifies the weakest type of   @BA58600
*   foot-print that may NOT be set.                            @BA58600
*   If LACBEST1 = 0, no foot-prints may be set.                @BA58600
*   If LACBEST1 = LACBESCN,  a CONNECT foot-print may not be se@BA58600
*   the weaker foot-print needed for all other operations may b@BA58600
*   If LACBEST1 = 2*LACBESCN, any type of foot-print may be set@BA58600
LACBESCN EQU   X'20'       A CONNECT foot-print is requested by        X
                           setting this bit to 1 in the first byte     X
                           of the LG value passed to IRSETFP   @BA58600
.*** *                          NO FOOTPRINTS  DELETED BY APAR @BA58600
.***          DS   X            RESERVED       DELETED BY APAR @BA58600
.*** *ACBENUQ EQU   X'80'       LOGON NAME NEE DELETED BY APAR @BA58600
         DS    0F                                          @FJ410R @L2C
         SPACE 1                                               @BBDJ10X
LACBELEN EQU   *-LACBE     LENGTH OF LACB ENTRY                @BBDJ10X
         DFHEJECT                                              @BBDJ10X
***********************************************************************
* * *                                                             * * *
* * *          LOGON CONTROL BLOCK.                               * * *
* * *                                                             * * *
* * *    THE LCB IS THE SOURCE OF ALL INFORMATION RELEVANT TO A   * * *
* * *    PARTICULAR LOGON TO THE SVC; THE SUBSYSTEM LOGON CONTROL * * *
* * *    BLOCK REFLECTS CERTAIN OF THE LCB INFORMATION WHICH IT   * * *
* * *    IS RELEVANT FOR THE SUBSYSTEM LEVEL OF INTER-REGION      * * *
* * *    COMMUNICATION FUNCTION TO SEE.  FOR THIS REASON THE      * * *
* * *    STATUS BYTES IN THE LCB AND THE SLCB ARE IDENTICAL;      * * *
* * *    FLAGS IN THOSE STATUS BYTES ARE DEFINED WITH THE         * * *
* * *    DEFINITION OF THE SLCB IN THE DFHIRSDS COPY BOOK.        * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                               @BBDJ10X
LCB      DSECT                                                 @BBDJ10X
LCBUSID  DS    0F          USER IDENTIFICATION                 @BBDJ10X
LCBUSNUM DS    H           .. USER NUMBER                      @BBDJ10X
LCBUSRID DS    H           .. USER IDENTIFIER                  @BBDJ10X
LCBSLCBA DS    A           ADDRESS OF SLCB                     @BBDJ10X
LCBSUDB  DS    A           ADDRESS OF SUDB                     @BBDJ10X
LCBCHAIN DS    A           ADDRESS OF NEXT LCB FOR THIS SUDB   @BBDJ10X
LCBLACBE DS    A           ADDRESS OF LACBE                    @BBDJ10X
         DS    H           reserved
LCBSYTOT DS    H           TOTAL NUMBER OF CONNECTABLE SYSTEMS @BBDJ10X
LCBQICT  DS    F           QUIESCE CONNECTION COUNT            @BBDJ10X
LCBSLSP  DS    0D          OPERAND FOR CDS INSTRUCTION             @D1A
LCBSLOCK DS    0F          SRB LOCK USED TO SERIALIZE THE USE OF   @D1A
*                          ..THE SRB BLOCK BY SCHEDULE AND
*                          ..PROCESSING OF SRB PARAMETER BLOCK
*                          ..WORK QUEUE BY THE SRB PROCESSOR
LCBSLOI  DS    H           POSSIBLE VALUES ARE:                    @D1A
LCBSLOIF EQU   X'8000'     LOCK NOT HELD                           @D1A
*                          LACBE INDEX = A TCB HAS SCHEDULED SRB
*                          ..AND SET ITS LACBE INDEX IN THE LOCK
*                          ZERO        = SRB HOLDS LOCK
LCBSLOC  DS    H           COUNTER INCREMENTED EACH TIME A TCB     @D1A
*                          ..PLACES LACBE INDEX IN LOCK
LCBSRBP  DS    F           SRB PARAMETER CHAIN                 @BBDJ104
LCBSRB   DS    F           ADDR OF OUR SRB                     @BBDJ104
LCBSRBWA DS    F           ADDR OF OUR SRB'S WORK AREA             @D1A
LCBFRRPM DS    F           ADDRESS OF FRR PARAMETER AREA (UNUSED)  @L3C
LCBRMTR  DS    H           RESOURCE MANAGER TERMINATION ROUTINE        C
                           FOR PURGE OF SRBS                       @D1A
LCBXMREQ DS    BL.8        XM resources needed for this LCB        @L8A
LCBXMTSW EQU   X'80'       LCB requires / has got a non-swappable      X
                           address space                           @L8A
LCBXMUCA EQU   X'40'       LCB requires / has got an XM use count      X
                           array (UCA) & authorization index (AX)  @L8A
LCBXMETL EQU   X'20'       LCB requires / has got an entry table &     X
                           linkage index (LX)                      @L8A
LCBXMGOT DS    BL.8        XM resources obtained & fully initialized   X
                           for this LCB and included in the        @L8AX
                           corresponding JSB use count             @L8A
LCBSTTUS DS    0F          STATUS BYTES                        @BBDJ10X
LCBSTTS1 DS    C           .. STATUS BYTE 1                    @BBDJ10X
LCBSTTS2 DS    C           .. STATUS BYTE 2                    @BBDJ10X
LCBSTTS3 DS    C           .. STATUS BYTE 3                    @BBDJ10X
LCBSTTS4 DS    C           .. STATUS BYTE 4                    @BBDJ10X
         SPACE 1                                                   @D2A
LCBBTCHV DS    F           Batching value                          @D2C
LCBBTCHC DS    F           Current batch count                     @D2C
LCBSVCL  DS    B           Save value of SVCLOC parm               @L4A
*        EQU   B'10000000' 1... .... Get storage above 16m         @L8C
LCBWEARR DS    A           address of exit point array             @L5A
LCBWELTP DS    F           work exit latent parm                   @L5A
LCBWEACT DS    F           bit map indicating active exits         @L5A
WENCACT  EQU   X'01'       new connect exit point is active        @L5A
WESWACT  EQU   X'02'       switch exit point is active             @L5A
WESW1ACT EQU   X'04'       switch 1st exit point is active         @L5A
WEDSNACT EQU   X'08'       disconnect normal exit point is active  @L5A
WEDSAACT EQU   X'10'       disconnect abnormal exit pnt is active  @L5A
WEIQUACT EQU   X'20'       immediate quiesce exit point is active  @L5A
WEDWPACT EQU   X'40'       disc when possible exit point is active @L5A
WEQCACT  EQU   X'80'       Quiesce complete exit point is active   @L5A
LCBWENME DS    CL8         name of inter region work exit          @L5A
LCBWETYP DS    0A          work exit type                          @L5A
LCBWEVER DS    X           work exit version                       @L5A
WETYP311 EQU   X'00'       311 work exit type                      @L5A
WETYP320 EQU   X'01'       320 work exit type                      @L5A
         DS    3X          reserved                                @L5A
*  The Length/Address ordering of the following must be maintained
LCBALCBL DS    F           Length of active vector                 @L8A
LCBALCBV DS    A           Pointer to active LCBE address vector   @L8A
LCBALCBE DS    A           Pointer to active LCBE chain            @L8A
LCBASCAL DS    F           Length of active SCACB                  @L8A
LCBASCAA DS    A           Pointer to active SCACB                 @L8A
LCB#SCCB DS    F           Total number of SCCBs committed so far  @L8A
LCBALCBD DS    A           Pointer to active LCBD chain            @L8A
LCBAPPLD DS    CL8         APPLID (name specified on LOGON request)@L8A
LCBMEMTK DS    XL8         Our XCF member token from IXCJOIN       @L8A
LCBRCFGL DS    F           Reconfiguration lock (for dynamic CHANGE@L8A
LCBRCFGO DS    X'80'       Reconfiguration in progress             @L8A
LCBCC#   DS    H           Reconfiguration change counter which is @L8A
*                          used to check whether a CCB address sent@L8A
*                          in the XCF message control data is still@L8A
*                          valid (for dynamic CHANGE)              @L8A
         DS    H           Reserved                                @L8A
LCBPHB   DS    A           Pointer to first partner history block  @L8A
*                          for partners whose first XCF message    @L8A
*                          arrived when this LCB had no active     @L8A
*                          LCBE for the relevant APPLID            @L8A
LCBQSYSL DS    F                Length of Group Exit's answer area for X
                                IXCQUERY REQINFO=SYSPLEX requests  @L8A
LCBQSYSA DS    A                Pointer to Group Exit's IXCQUERY       X
                                REQINFO=SYSPLEX answer area        @L8A
LCBGXWSA DS    A                Pointer to Group Exit's working        X
                                storage                            @L8A
LCBIRRX_INSTANCE  DS F          XCF retry SRB instance number      @LAA
                  DS 0D         align for CDS on lock & q header   @LAA
LCBIRRX_LOCK      DS A          XCF retry SRB lock                 @LAA
***********************************************************************
DIE_LOCKED        EQU 128       serialize access to TQE/SRB        @LAA
*        This bit is used to serialize access to the TQE and          *
*        SRB used for XCF MSGO retries. If a dispatchable             *
*        unit (TCB or SRB) manages to set the DIE_LOCKED bit on       *
*        then it may then set the DIE, the DIE will then              *
*        schedule the SRB.                                            *
***********************************************************************
                  SPACE 1                                          @LAA
***********************************************************************
DIE_DISABLED      EQU 64                                           @LAA
*        This bit is set during clear/logoff processing and indicates *
*        that the DIE willnever be scheduled again. If this bit is on *
*        then the DIE_LOCKED bit will also be on indicating that      *
*        the DIE is locked to the termination process.                *
*        This bit is neccessary so that if an unexpected message      *
*        arrives in the message exit, and the reply generated within  *
*        the message exit fails for an XCF busy condition then we can *
*        detect that the message will never be resent.                *
***********************************************************************
LCBIRRX_Q         DS A          XCR retry SRB work queue head      @LAA
LCBIRRX_TQE       DS A          Address of the XCF retry TQE       @LAA
LCBIRRX_SRB       DS A          Address of the XCF retry SRB       @LAA
LCBIRRX_WS        DS A          Address of the XCF retry SRB W/S   @LAA
LCBIRRX_TIME      DS D          Time the SRB should next run       @LAA
LCBIRRX_RMTR      DS H          XCF retry SRB RMTR routine (BR RE) @LAA
         DS    0D                                              @BBDJ104
         SPACE 1                                               @BBDJ10X
LCBLNGTH EQU   *-LCB       LENGTH OF LCB                       @BBDJ10X
         SPACE 1                                               @BBDJ10X
         SPACE 5                                               @BBDJ10X
***********************************************************************
* *                                                                 * *
* *            LOGON CONTROL BLOCK ENTRY                            * *
* *                                                                 * *
* *      THE LOGON CONTROL BLOCK CONTAINS AN ENTRY (LCBE) FOR       * *
* *      EACH SYSTEM TO WHICH CONNECTIONS MAY BE MADE, I.E. ONE     * *
* *      FOR EACH ENTRY IN THE LOGON CONNECTIONS LIST SPECIFIED     * *
* *      WHEN THE USER LOGGED ON.                                   * *
* *                                                                 * *
***********************************************************************
         SPACE 1                                               @BBDJ10X
LCBE     DSECT                                                 @BBDJ10X
LCBENEXT DS    A                   address of next LCBE        @BA58600
LCBELCBX DS    A           Pointer to XCF LCBE extension block @BA58600
LCBECCB  DS    A           ADDRESS OF 1ST CCB FOR THIS SYSTEM  @BBDJ10X
LCBENUM  DS    0F          NUMBERS OF CCBS FOR SYSTEM          @BBDJ10X
LCBESNUM DS    H           NUMBER OF SECONDARY CCBS FOR SYSTEM @BBDJ10X
LCBEPNUM DS    H           NUMBER OF PRIMARY CCBS FOR SYSTEM   @BBDJ10X
LCBENAM  DS    CL8         NAME OF CONNECTED TO SYSTEM         @BA58600
LCBEUSID DS    CL8         Our own USERID when we last used this LCBE  X
                           for an outgoing CONNECT             @BA58600
LCBELG   DS    F           LG of current partner for out-bound CONNECTsX
                           - zero if XCF is being used         @BA58600
LCBEFLG  DS    X           FLAG BYTE                           @BBDJ10X
*** LCBESECN EQU   X'80'       .. ACCEP BDJ10X DELETED BY APAR @BA58600
LCBEXMOK EQU   X'80'       .. XM ACCEPTABLE FOR THIS CNECTION          F
                              MVS ONLY                             @L3C
         SPACE 1                                               @BBDJ10X
LCBEDYNF DS    X           Dynamic flags                           @L8C
LCBEPTOK EQU   X'80'       Current partner's LG or XCF token kn@BA58600
LCBESEOK EQU   X'40'       Our current USERID is authorized to CONNECT X
                           to the current partner instance     @BA58600
LCBEQUSC EQU   X'20'       LCBE in quiesce                             X
                                                                   @L8A
LCBEINDX DS    H           This LCBE's index in LCBE address vector@L8A
*** LCBENEXT DS    A                      @L8A DELETED BY APAR @BA58600
*** LCBELCBX DS    A           Pointer    @L8A DELETED BY APAR @BA58600
*** LCBELG   DS    F           LG of cu NNECTs DELETED BY APAR @BA58600
***                                       @L8A DELETED BY APAR @BA58600
         DS    0D          Force length to multiple of 8       @BA58600
LCBELEN  EQU   *-LCBE                                          @BBDJ10X
         SPACE 3                                                   @L8A
LCBEVECT DSECT                     LCBE address vector             @L8A
LCBEVELM DS    A                   LCBE element address            @L8A
         SPACE 3
LCBD     DSECT                     LCBE block prefix               @L8A
LCBDTOKN DS    CL8                 Token for block add             @L8A
LCBDFLG  DS    B                   Flag byte                       @L8A
LCBDFROK EQU   X'80'               ROLL-BACK is valid for this @BA58600
LCBDFCOK EQU   X'40'               COMMIT is valid for this LCB@BA58600
         DS    3X                  reserved                        @L8A
* The length/address ordering of the following must be maintained
LCBDLEN  DS    F                   Length of this block & prefix   @L8A
LCBDNEXT DS    A                   pointer to next block or 0      @L8A
LCBDEXTL DS    F                   Length of extension block       @L8A
LCBDEXTP DS    A                   Pointer to XCF extension block  @L8A
LCBDSCCL DS    F                   Length of SCCB block            @L8A
LCBDSCCP DS    A                   pointer to SCCB block           @L8A
         DS    0D                  round to double word            @L8A
LCBDL    EQU   *-LCBD              length of this prefix           @L8A
         DFHEJECT                                              @BBDJ10X
***********************************************************************
* *                                                                 * *
* *            XCF LOGON CONTROL BLOCK ENTRY EXTENSION              * *
* *                                                                 * *
* *      THE XCF EXTENSION TO THE LCBE CONTAINS XCF SPECIFIC        * *
* *      INFORMATION REGARDING CONNECTIONS TO OTHER SYSTEMS. THIS   * *
* *      BLOCK IS GETMAINED FROM PRIVATE STORAGE WHEN THE           * *
* *      CORRESPONDING LCBE IS ACQUIRED.                            * *
* *                                                                 * *
***********************************************************************
         SPACE 1
LCBEX    DSECT
LCBEXPHB DS    A           Pointer to first partner history block  @L8A
*                          for partners whose APPLID matches that  @L8A
*                          in the LCBE (LCBENAM)                   @L8A
LCBEXPCC DS    F           "Primary CONNECT successful" change counter X
                                                                   @L8A
LCBEXPTK DS    XL8         XCF member token of partner for         @L8A
*                          outgoing CONNECTS                       @L8A
LCBEXCSC DS    F           Cumulative CONNECT counter              @L8A
LCBEXSN# DS    F           Session number for next outgoing CONNECT@L8A
LCBEXCSS DS    0D                Aligned for CDS                       X
                                                                   @L8A
         DS    F                 Session number of start of sequence   X
                                                                   @L8A
LCBEX#PC DS    F                 Partner's number of primary CCBS  @L8A
LCBEXTOD DS    D                 TOD of end of "CONNECTs inhibited"    X
                                 interval etc. - aligned for CDS   @L8A
         DS    0D          Alignment for CCBX's                    @L8A
LCBEXLEN EQU   *-LCBEX     Length of LCBE extension                @L8A
         DFHEJECT
***********************************************************************
* * *                                                             * * *
* * *          CONNECTION CONTROL BLOCK                           * * *
* * *                                                             * * *
* * *    THE CCB IS THE REPOSITORY OF ALL INFORMATION RELEVANT    * * *
* * *    TO A PARTICULAR CONNECTION FROM THIS SUBSYSTEM.          * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                               @BBDJ10X
CCB      DSECT                                                 @BBDJ10X
CCBOWNER DS    0D          OWNERSHIP FIELDS                        @D1A
CCBLG    DS    0F          OTHER SIDE'S LACBE NO. & GENERATION @BBDJ10X
CCBL     DS    H           .. OTHER SIDE LACBE INDEX NUMBER    @BBDJ10X
CCBG     DS    H           .. OTHER SIDE GENERATION NUMBER     @BBDJ10X
CCBCSB   DS    A           ADDRESS OF CONNECTED-TO CSB         @BBDJ10X
         SPACE 2
* When a CCB is being used for an XCF session, CCBCSB contains a bit  *
* string instead of a CSB pointer.  CSBs are always double-word       *
* aligned, so to ensure correct interpretation of the contents of     *
* CCBCSB, the 3 low order bits of the XCF bit string must never all   *
* be zero.  This requirement constrains the choice of values for      *
* CCBKCONN, CCBKINIT and CCBKMXWH (but none of the others) to the 3   *
* low order bits.                                                     *
CCBKXCF  EQU   B'111'      The 3 low order bits being not all zero     X
                           indicates that an XCF session exists    @L8A
         SPACE 2
CCBKCONN EQU   X'00000001' Indicator that XCF CONNECT is in progress,  X
                           in TCB mode if this is a secondary CCB, in  X
                           SRB mode in the XCF Message Exit if this is X
                           a primary CCB                           @L8A
CCBKINIT EQU   X'00000002' Indicator that XCF CCB is initialized -     X
                           i.e. CCBXSN# & CCBXPTK are valid and the    X
                           CCB and SCCB have been initialized too  @L8A
CCBKMXWH EQU   X'00000004' Indicator that the Message Exit has done    X
                           something affecting this session (Was Here) X
                                                                   @L8A
CCBKGXWH EQU   X'00000008' Indicator that the Group Exit has done      X
                           something affecting this session (Was Here) X
                                                                   @L8A
CCBKOPEN EQU   X'00000010' Indicator that XCF connection to partner    X
                           has been established, so SWITCH, PULL,      X
                           QUIESCE and DISCONNECT should be processed  X
                           normally                                @L8A
CCBKTOKS EQU   X'00000020' Indicator that it is valid to issue SWITCH  X
                           in TCB mode, i.e. PULL is not pending and   X
                           our partner has replied to our last SWITCH  X
                           (if we have issued any yet)             @L8A
CCBKMOKS EQU   X'00000040' Indicator that it is valid for our Message  X
                           Exit to accept an incoming SWITCH from our  X
                           partner, i.e. PULL (in TCB mode) is not     X
                           pending and we have already replied to our  X
                           partner's last SWITCH (if any)          @L8A
* Note that a TCB mode PULL is pending if and only if both CCBKTOKS and
* CCBKMOKS are off and everything else is favourable, e.g. CCBKOPEN on
CCBKWAIT EQU   X'00000080' Indicator that a TCB mode request is        X
                           waiting for the completion of incompatible  X
                           Group Exit or Message Exit processing   @L8A
CCBKRESV EQU   X'00000700' Three bits reserved for future use      @L8A
CCBKTSWI EQU   X'00000800' TCB mode SWITCH in progress             @L8A
CCBKTIQU EQU   X'00001000' TCB mode IMMEDIATE QUIESCE in progress  @L8A
CCBKTDSC EQU   X'00002000' TCB mode DISCONNECT in progress         @L8A
CCBKTNQU EQU   X'00004000' TCB mode NORMAL QUIESCE in progress     @L8A
CCBKTPUL EQU   X'00008000' TCB mode PULL in progress               @L8A
CCBKGALV EQU   X'00010000' Group Exit ABNORMAL LEAVE in progress   @L8A
CCBKGNLV EQU   X'00020000' Group Exit NORMAL LEAVE in progress     @L8A
CCBKGNQU EQU   X'00040000' Group Exit NORMAL QUIESCE in progress   @L8A
CCBKMRST EQU   X'00080000' Message Exit RESET in progress          @L8A
CCBKMIQU EQU   X'00100000' Message Exit IMMEDIATE QUIESCE in progress  X
                                                                   @L8A
CCBKMDSC EQU   X'00200000' Message Exit DISCONNECT in progress     @L8A
CCBKMNQU EQU   X'00400000' Message Exit NORMAL QUIESCE in progress @L8A
CCBKMSSW EQU   X'00800000' Message Exit SWITCH started & still not     X
                           finished (might be segmented)           @L8A
CCBKM1SW EQU   X'01000000' Constant used to increase or decrease       X
                           CCBKMSWI by 1                           @L8A
CCBKMSWI EQU   -CCBKM1SW   Message Exit SWITCH in progress - count     X
                           allowing many SWITCH Message Exit SRBs to   X
                           run in parallel (current value is 255)  @L8A
         SPACE 4
CCBSCCBA DS    A           ADDRESS OF SCCB                     @BBDJ10X
CCBCCBX  DS    A                   Pointer to XCF CCB extension@BA58600
CCBLCBEP DS    A           address of LCBE for this CCB        @BA58600
CCBLCBAD DS    A           ADDRESS OF LCB FOR THIS CCB         @BA58600
*** CCBLCBEP DS    A           address    @L8C DELETED BY APAR @BA58600
CCBDATA  DS    A           DATA BUFFER ADDRESS                     @L3C
CCBSTATS DS    B           STATUS BYTES                        @BBDJ10X
CCBPRIM  EQU   X'80'       .. PRIMARY CCB INDICATOR            @BBDJ10X
CCBLOFS  EQU   X'40'       .. LAST CCB FOR A SYSTEM                @L8C
CCBDYNF  DS    B           Dynamic flags                           @L8A
CCBDPC   EQU   X'80'       .. PC instruction must be used for SWITCH   X
                           and PULL requests (i.e. XCF/PC or XM)   @L8A
CCBDXM   EQU   X'80'+X'40' .. This session is using XM             @L8A
CCBDSEQ  EQU   X'30'       .. CCB sequence number                  @L8A
******* Need to redefine CCBAXIST correctly ***************
CCBAXIST DS    0F          AX INDEX AND STATUS FLAGS       @FJ410R @L2A
         DS    H           INDEX OF AX VALUE IN USE FOR THIS           F
                           CONNECTION                      @FJ410R @L2A
         DS    H           STATUS FLAGS FOR COMPARE AND SWAP           F
                                                           @FJ410R @L2A
* FLAGS IN BYTE ONE OF STATUS
CCBAXCNT EQU   X'80'       AX INCLUDED IN USE COUNT        @FJ410R @L2A
CCBCNDP  DS    A                   Pointer to quick-cell containing    X
                                   data (currently USERID & time-stamp)X
                                   to be copied to this primary        X
                                   CCB's SCCB by the CONNECT SRB -     X
                                   field is used only by IRC, so it    X
                                   could perhaps overlay CCBAXIST,     X
                                   which is used only by XM        @L8A
*** CCBCCBX  DS    A                      @L8A DELETED BY APAR @BA58600
         SPACE 1                                               @BBDJ10X
         DS    0D          ALIGNMENT                           @BBDJ10X
CCBLNGTH EQU   *-CCB       LENGTH OF CCB                       @BBDJ10X
         SPACE 8                                               @BBDJ10X
CND      DSECT                                                     @L8A
CNDUSRID DS    CL8                 RACF USERID of job-step owning the  X
                                   secondary CCB which is being        X
                                   connected to the primary CCB        X
                                   pointing at this CND            @L8A
CNDSTOD  DS    XL8                 TOD clock reading stored under the  X
                                   secondary's TCB after deciding to   X
                                   CONNECT to this CND's primary CCB   X
                                                                   @L8A
CNDLEN   EQU   *-CND               Length of CND                   @L8A
         DS    0S(CSBLEN-CNDLEN)   Force assembly error if a CND       X
                                   becomes longer than a CSB       @L8A
         DFHEJECT                                              @BBDJ10X
***********************************************************************
* * *                                                             * * *
* * *          XCF CONNECTION CONTROL BLOCK EXTENSION             * * *
* * *                                                             * * *
* * *    THE CCBX IS THE XCF SPECIFIC EXTENSION TO THE CCB AND    * * *
* * *    INCLUDES INFORMATION RELEVANT TO A PARTICULAR CONNECTION * * *
* * *    FROM THIS SUBSYSTEM. IT IS GETMAINED OUT OF PRIVATE      * * *
* * *    STORAGE.                                                 * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                                   @L8A
CCBX     DSECT                                                     @L8A
CCBXCMCT DS    0D          Message counter & queue pointer for CDS @L8A
         DS    F           Cumulative message counter              @L8A
CCBXMQP  DS    A           Pointer to message queue (the sign bit  @L8A
*                          is a lock bit)                          @L8A
CCBXMSG# DS    F           Message number for next message sent    @L8A
CCBXSN#  DS    F           Current session number                  @L8A
CCBXPTK  DS    D           Partner's XCF member token - must be D  @L8A
         DS    0D          Force double-word alignment to ensure       X
                           atomic fetch/store with LM/STM          @L8A
         DS    H           Reserved                                @L8A
CCBXPCC# DS    H           Partner's reconfiguration change counter@L8A
CCBXPCCB DS    A           Address of partner's CCB                @L8A
CCBXLREM DS    0D          Force double-word alignment for CDS     @L8A
         DS    F           Length remaining to be received for a       X
                           segmented SWITCH                        @L8A
CCBXAREA DS    A           Pointer to target area captured from        X
                           SCCBAREA during segmented SWITCH - sign bit X
                           distinguishes between target address of     X
                           zero & target area too small            @L8A
CCBXPHB  DS    A           Pointer to associated PHB if this CCB/CCBX  X
                           is included in the PHB's connected session  X
                           count                                   @L8A
         DS    0D          Force length to a double-word multiple  @L8A
CCBXLEN  EQU   *-CCBX      Length of CCB extension                 @L8A
         DFHEJECT                                              @BBDJ10X
***********************************************************************
* * *                                                             * * *
* * *          CONNECTION STATUS BLOCK                            * * *
* * *                                                             * * *
* * *    THE CSB DESCRIBES THE CURRENT STATUS OF A PARTICULAR     * * *
* * *    CONNECTION BETWEEN TWO SYSTEMS.                          * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                               @BBDJ10X
CSB      DSECT                                                 @BBDJ10X
CSBCHAIN DS    0A          ADDRESS OF NEXT AVAILABLE CSB       @BBDJ10X
CSBCCB   DS    0D          ADDRESSES OF CCBS                   @BBDJ10X
CSBPRIM  DS    A           .. ADDRESS OF PRIMARY CCB           @BBDJ10X
CSBSECD  DS    A           .. ADDRESS OF SECONDARY CCB         @BBDJ10X
CSBSTAT  DS    0D          CSB STATUS FLAGS                    @BBDJ10X
CSBPFLAG DS    BL4         .. PRIMARY FLAG BYTES               @BBDJ10X
CSBSFLAG DS    BL4         .. SECONDARY FLAG BYTES             @BBDJ10X
         SPACE 1                                               @BBDJ10X
CSBLEN   EQU   *-CSB       LENGTH OF CSB                       @BBDJ10X
         SPACE 1                                               @BBDJ10X
***********************************************************************
* *                                                                 * *
* *            CONNECTION STATUS BLOCK FLAG DEFINITIONS             * *
* *                                                                 * *
* *      THE CONNECTION STATUS BLOCK (CSB) CONTAINS TWO WORDS OF    * *
* *      FLAG BITS.  THE FIRST WORD REFERS TO THE PRIMARY SIDE OF   * *
* *      THE CONNECTION AND THE SECOND TO THE SECONDARY SIDE.       * *
* *      FLAGS ARE DEFINED IDENTICALLY IN THE TWO WORDS WITH THE    * *
* *      EXCEPTION OF THE FLAGS IN THE FIRST BYTE WHICH ARE USED    * *
* *      ONLY IN THE SECONDARY WORD.                                * *
***********************************************************************
         SPACE 1                                               @BBDJ10X
*   FLAGS IN FLAG BYTE ONE (SECONDARY SIDE ONLY)                      *
CSBSPCNG EQU   X'80'       Secondary is acquiring primary CCB  @BA58600
CSBSCNG  EQU   X'40'       SECONDARY IS CONNECTING             @BA58600
CSBXMCNG EQU   X'20'       CROSS MEMORY CONNECT IN PROGRESS        @D1A
CSBSCND  EQU   X'10'       LINK IS CONNECTED                   @BA58600
CSBATREQ EQU   X'08'       ATSET REQUIRED BY SRB               @BA58600
CSBATNCM EQU   X'04'       ATSET NOT YET COMPLETED BY SRB  @FJ410R @L2A
CSBATINP EQU   X'02'       ATSET IN PROGRESS by SRB            @BA58600
         SPACE 1                                               @BBDJ10X
*   FLAGS IN FLAG BYTE TWO - STATUS FLAGS                             *
CSBXDED  EQU   X'80'       THIS SIDE HAS DISCONNECTED          @BBDJ10X
CSBXIQD  EQU   X'40'       This side has IQed                  @BA58600
.*** CSBXIQD  EQU   X'20'       THIS SIDE HAS  DELETED BY APAR @BA58600
CSBXWAIT EQU   X'04'       THIS SIDE IS WAITING                @BBDJ10X
CSBXPP   EQU   X'02'       THIS SIDE HAS A PULL PENDING        @BBDJ10X
CSBXIC   EQU   X'01'       CONTROL IS ON THIS SIDE             @BBDJ10X
         SPACE 1                                               @BBDJ10X
*   FLAGS IN FLAG BYTE THREE - PROGRESS FLAGS                         *
CSBXDING EQU   X'80'       THIS SIDE IS DISCONNECTING          @BBDJ10X
CSBXSWIT EQU   X'40'       THIS SIDE IS SWITCHING              @BBDJ10X
CSBXPULL EQU   X'20'       THIS SIDE IS PULLING                @BBDJ10X
CSBXNQ   EQU   X'10'       THIS SIDE IS NQING                  @BBDJ10X
CSBXIQ   EQU   X'08'       THIS SIDE IS IQING                  @BBDJ10X
CSBXCLER EQU   X'04'       THIS SIDE IS CLEARING               @BBDJ10X
CSBXSWIS EQU   X'02'       The SRB scheduled to the other side is      X
                           executing the SWITCH notification and       X
                           termination logic                   @BA58600
         DFHEJECT                                              @BA58600
***************************************************************@BA58600
***************************************************************@BA58600
* *                                                            @BA58600
* *               WORK QUEUE PARAMETER BLOCK                   @BA58600
* *                                                            @BA58600
* *       THIS BLOCK IS BUILT WHEN WORK TO BE PROCESSED IN SRB @BA58600
* *       MODE IS SCHEDULED. IT PROVIDES INFORMATION TO IDENTIF@BA58600
* *       THE CODE TO BE EXECUTED IN SRB MODE AND THE CONTROL  @BA58600
* *       BLOCKS TO BE ACCESSED.                               @BA58600
* *                                                            @BA58600
***************************************************************@BA58600
***************************************************************@BA58600
SRBP     DSECT                                                 @BA58600
SRBPFCHN DS    A                   ADDRESS OF NEXT PARM BLOCK  @BA58600
SRBPBCHN DS    A                   ADDR OF PREVIOUS PARM BLOCK @BA58600
SRBPCSB  DS    A                   ADDR OF CSB FOR PROCESSING  @BA58600
SRBPFUNC DS    H                   REQUEST FUNCTION TYPE       @BA58600
SRBPSIDE DS    C                   PRIM/SEC CSB INDICATOR      @BA58600
SRBPFLAG DS    8B                  FLAG BYTE - reserved        @BA58600
         SPACE ,                                               @BA58600
         DFHEJECT                                              @BCDJ104
***********************************************************************
*                                                                     *
*        Large quick cell anchor block                                *
*                                                                     *
*                                                                     *
***********************************************************************
LQCTL    DSECT ,                   Large quick cell anchor         @L8A
LQCNOENT DC    H'64'         LQCCLEN/LQBDLEN - # entries in ladder @L8A
LQCSP#   DC    AL1(0,SPXLQC)       Key & subpool number            @L8A
LQCBLEN  DC    F'4096'             Size of large quick cell block  @L8A
LQCCLEN  DC    F'512'              Size of each large quick cell   @L8A
LQCALEN  DC    A(X'1F4')   LQCCLEN-LQCHLEN - Cell data area length @L8A
LQCUSEM  DC    A(X'7FFFFFFF')      Cell use map - first in use     @L8A
LQCLADD  DS    A                   Large quick cell Ladder address @L8A
LQCBHDYN DS    F                   Highest transfer buffer usage   @L8C
LQCBCDYN DS    F                   Current transfer buffer usage   @L8C
         SPACE 1
LQCCTLEN EQU   *-LQCTL             length of anchor                @L8A
         SPACE 3
***********************************************************************
* *                                                                 * *
* *            LADDER ENTRY DESCRIPTOR                              * *
* *                                                                 * *
* *      THE LADDER IS USED TO RECORD THE STORAGE BLOCKS IN USE AS  * *
* *      DATA TRANSFER BUFFERS.                                     * *
* *      A BLOCK OF STORAGE IS OBTAINED, FORMATTED INTO A NUMBER    * *
* *      OF 'LARGE QUICK CELLS' AND THE BLOCK IS KEPT TRACK OF IN   * *
* *      A LADDER.                                                  * *
* *                                                                 * *
***********************************************************************
         SPACE 2                                               @BCDJ104
LQBD     DSECT                     Large quickcell block descriptor
LQBDESCR DS    D                   field for CDS instruction       @L8A
         ORG   LQBDESCR                                            @D1A
LQBDSTGE DS    A                   Address of block containing cells   F
                                                                   @D1A
         DS    F                   Allocation bit map (1 => free cell) F
                                                                   @D1A
         ORG  ,                                                    @D1A
         SPACE 1
LQBDLEN  EQU   *-LQBD              length of anchor                @L8A
LQBDSHFT EQU   3*(1+2*(LQBDLEN-8)*(8-LQBDLEN)) Use causes assembly     X
                                   errors unless LQBDLEN = 8       @D1A
         SPACE 2                                                   @D1A
***********************************************************************
* *                                                                 * *
* *            LARGE QUICK CELL HEADER                              * *
* *                                                                 * *
* *      EACH LARGE QUICK CELL HAS A HEADER, WHICH INCLUDES         * *
* *      THE INDEX OF THE LADDER ENTRY FOR THE BLOCK CONTAINING     * *
* *      THE CELL, AND A POINTER TO THE NEXT CELL IN THE CHAIN      * *
* *      OF LARGE QUICK CELLS (ANCHORED IN FIELD CCBDATA IN THE     * *
* *      TARGET SYSTEM'S CCB) OR ZERO.                              * *
* *                                                                 * *
***********************************************************************
         SPACE 2                                               @BM14268
LQCELL   DSECT                                                 @BM14268
LQCINDEX DS    F           Index of ladder entry for this cell     @D1C
LQNCELL  DS    A           Next cell in chain                      @L3C
LQCLENG  DS    F           Length of data in transfer buffer   @BM14268
LQCOFF   DS    F           Offset of message                       @L8A
LQCHEND  DS    0F                                              @BM14268
LQCHLEN  EQU   LQCHEND-LQCELL      Cell header length          @BM14268
LQCPADD  EQU   0                   address offset in cell data     @L8A
LQCPLEN  EQU   4                   length  offset in cell data     @L8A
LQCPENT  EQU   8                   entry   offset in cell data     @L8A
         DFHEJECT  ,                                               @L3A
.*** ***************************************** DELETED BY APAR @BA58600
.*** * *                                       DELETED BY APAR @BA58600
.*** * *            WORK AREA                  DELETED BY APAR @BA58600
.*** * *                                       DELETED BY APAR @BA58600
.*** * *      A WORK AREA IS ACQUIRED AT ASSOC DELETED BY APAR @BA58600
.*** * *      THE STORAGE OF REGISTERS FOR SUB DELETED BY APAR @BA58600
.*** * *      ONCE A SUDB IS OBTAINED ITS ADDR DELETED BY APAR @BA58600
.*** * *      THE PARAMETER BLOCK TO THE SVC I DELETED BY APAR @BA58600
.*** * *      THIS SAVE AREA AND REGISTER 13(  DELETED BY APAR @BA58600
.*** * *      RETURN ADDRESS - OS)  IT IS RELE DELETED BY APAR @BA58600
.*** * *      OR IF THE ASSOCIATE FAILS.       DELETED BY APAR @BA58600
.*** ***************************************** DELETED BY APAR @BA58600
.***          SPACE 2                          DELETED BY APAR @BA58600
.*** IRSVCFDS DSECT                            DELETED BY APAR @BA58600
.***          ORG   IRVCEND             LENGTH DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSRPA    DS    0XL(L'WSSRBPB+L'WSRPAPHB)  DELETED BY APAR @BA58600
.*** WSSRBPB  DS    0A                  POINTE DELETED BY APAR @BA58600
.*** WSSANCH  DS    A                   PTR. T DELETED BY APAR @BA58600
.*** WSRPAPHB DS    0A                  POINTE DELETED BY APAR @BA58600
.*** WSRPALCB DS    A                   LCB PO DELETED BY APAR @BA58600
.*** *** WSRPACCB DS    A                    Y DELETED BY APAR @BA58600
.*** WSRESMTK DS    F                   TOKEN  DELETED BY APAR @BA58600
.*** WSPREVR9 DS    A                   PREVIO DELETED BY APAR @BA58600
.*** * LEVEL 1 STORAGE AREAS (SHORTEST LIFE-TI DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSGETSSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSGETSS1 DS    XL(4*(1+RE-RB))     REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   WSGETSSV                   DELETED BY APAR @BA58600
.*** WSGETSS2 DS    XL(4*(1+R0-R0))     REGIST DELETED BY APAR @BA58600
.*** WSGETSS3 DS    XL(4*(1+RE-RE))     REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600
.*** WSRELSSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSRELSS1 DS    XL(4*(1+16+R1-RE))  REGIST DELETED BY APAR @BA58600
.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600
.*** WSSTUPSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSSTUPS1 DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600
.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600
.*** WSMAXSYS DS    F                   MAX. N DELETED BY APAR @BA58600
.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600
.*** WSCSBSSV DS    XL(4*(1+R1-R0))     SAVE A DELETED BY APAR @BA58600
.***          ORG   ,                   RESET  DELETED BY APAR @BA58600
.*** WSLEVEL2 EQU   *                   START  DELETED BY APAR @BA58600
.*** * AREAS PRESENT ONLY IN THE SSI VERIFY ST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600
.*** WSRESMGR DS    XL(RESMGR_LIST_L)   RESMGR DELETED BY APAR @BA58600
.***          ORG   ,                   RESET  DELETED BY APAR @BA58600
.*** *** WSUSERID DS    CL8                    DELETED BY APAR @BA58600
.*** ***          ORG   WSUSERID               DELETED BY APAR @BA58600
.*** WSRESMPM DS    XL8                 PARAME DELETED BY APAR @BA58600
.*** WSSUDBWS DS    A                   SAVE A DELETED BY APAR @BA58600
.*** * END OF AREAS PRESENT ONLY IN ASSOCIATE' DELETED BY APAR @BA58600
.*** * LEVEL 2 STORAGE AREAS                   DELETED BY APAR @BA58600
.***          ORG   WSLEVEL2            RESET  DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSQCASV  DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSQCAS1  DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSSHEDSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSSHEDS1 DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600
.***          DS    XL(4*(1+RF-RF))     REGIST DELETED BY APAR @BA58600
.*** WSSHEDS2 DS    XL(4*(1+R1-R0))     REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSPHBASV DS    XL(4*(1+RD-RD))     SAVE A DELETED BY APAR @BA58600
.*** WSPHBASN DS    0F                  END OF DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600
.*** WSPHBRSV DS    XL(4*(1+16+R1-RD))  SAVE A DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600
.*** WSLQCASV DS    0F                  SAVE A DELETED BY APAR @BA58600
.***          DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600
.*** WSLQCAS1 DS    XL(4*(1+RF-RF))     REGIST DELETED BY APAR @BA58600
.*** WSLQCAS2 DS    XL(4*(1+R0-R0))     REGIST DELETED BY APAR @BA58600
.*** WSLQCAS3 DS    XL(4*(1+R5-R2))     REGIST DELETED BY APAR @BA58600
.*** WSLQCAS4 DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600
.*** WSLQCRSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSLQCRS1 DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600
.*** WSLQCRS2 DS    XL(4*(1+16+R5-RD))  REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   ,                   RESET  DELETED BY APAR @BA58600
.*** WSPHBPSV DS    XL(4*(1+RD-RD))     SAVE A DELETED BY APAR @BA58600
.***          ORG   WSPHBPSV            OVERLA DELETED BY APAR @BA58600
.*** WSGETMSV DS    XL(4*(1+16+R2-RE))  REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600
.*** WSPOSTSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** *                                  AND PO DELETED BY APAR @BA58600
.*** WSPOSTS1 DS    XL(4*(1+16+R3-RD))  REGIST DELETED BY APAR @BA58600
.*** WSPOSTS2 DS    XL(4*(1+RB-RA))     REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          DS    0F                  ALIGN  DELETED BY APAR @BA58600
.*** WSWEPARM DS    XL(IRWE_INPUT_L)    PARMLI DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSWESAVE DS    XL(4*(1+16+R2-RA))  SAVE A DELETED BY APAR @BA58600
.*** ***          SPACE 1                    M DELETED BY APAR @BA58600
.*** ***          ORG   WSWESAVE               DELETED BY APAR @BA58600
.*** *** WSUNWRSV DS    0F                   M DELETED BY APAR @BA58600
.*** *** WSUNWRS1 DS    (1+RD-RD)F             DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** ***          SPACE 1                      DELETED BY APAR @BA58600
.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600
.*** WSXPSTSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSXPSTS1 DS    XL(4*(1+16+R2-RD))  REGIST DELETED BY APAR @BA58600
.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSSHRSV  DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSSHRS1  DS    XL(4*(1+16+R2-RC))  REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSSCHRSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSSCHRS1 DS    XL(4*(1+16+R1-RA))  REGIST DELETED BY APAR @BA58600
.*** ***          SPACE 1                      DELETED BY APAR @BA58600
.*** ***          ORG   WSQCASV                DELETED BY APAR @BA58600
.*** *** WSSRCHSV DS    0F                     DELETED BY APAR @BA58600
.*** ***          DS    (1+16+R1-RD)F          DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** * AREAS THAT CAN SHARE STORAGE WITH BOTH  DELETED BY APAR @BA58600
.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600
.*** LOADINST DS    0F                         DELETED BY APAR @BA58600
.*** ******* HOW LONG IS THIS PARAMETER LIST?? DELETED BY APAR @BA58600
.***          LOAD EPLOC=LCBWENME,GLOBAL=(YES, DELETED BY APAR @BA58600
.*** LOADPLEN EQU   *-LOADINST                 DELETED BY APAR @BA58600
.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600
.*** WSXMSAVE DS    XL(4*18)            SAVE A DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSUNWRSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSUNWRS1 DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSAXLIST DS    0F                         DELETED BY APAR @BA58600
.***          DS    H                   NO. OF DELETED BY APAR @BA58600
.***                                           DELETED BY APAR @BA58600
.*** WSAX     DS    H                   AX IS  DELETED BY APAR @BA58600
.*** WSLXLIST DS    0F                         DELETED BY APAR @BA58600
.***          DS    F                   NO. OF DELETED BY APAR @BA58600
.***                                           DELETED BY APAR @BA58600
.***          DS    F                   LX IS  DELETED BY APAR @BA58600
.*** WSTKLIST DS    0F                         DELETED BY APAR @BA58600
.***          DS    F                   NO. OF DELETED BY APAR @BA58600
.***                                           DELETED BY APAR @BA58600
.***          DS    F                   TOKEN  DELETED BY APAR @BA58600
.*** WSETDES  DS    0F                  ETDES  DELETED BY APAR @BA58600
.***          DS    X                    FORMA DELETED BY APAR @BA58600
.***          DS    B                    OPTIO DELETED BY APAR @BA58600
.***          DS    AL2                  RESER DELETED BY APAR @BA58600
.***          DS    A                    TOKEN DELETED BY APAR @BA58600
.***          ORG   WSGETMSV            OVERLA DELETED BY APAR @BA58600
.*** *** WS                                                    @BA58600
.*** *** WS                                                    @BA58600
.*** WS                                                        @BA58600
.*** WSMSGLEN DS    F                   LENGTH DELETED BY APAR @BA58600
.*** WSLENLFT DS    F                   LENGTH DELETED BY APAR @BA58600
.*** *** WSPART   DS    A,H                    DELETED BY APAR @BA58600
.*** *** WSLENPAR EQU   *-WSPART               DELETED BY APAR @BA58600
.***          DS    0F                  ALIGN  DELETED BY APAR @BA58600
.*** WSELEMTB DS    0XL8                MSG. P DELETED BY APAR @BA58600
.***          ORG   WS                                         @BA58600
.*** WSUSTATE DS    XL(USTATEL)         USER S DELETED BY APAR @BA58600
.***          ORG   WSPHBASN            AREAS  DELETED BY APAR @BA58600
.***                                    OVERLA DELETED BY APAR @BA58600
.*** WSQUAHDR DS    XL(QUAHLENG)        HEADER DELETED BY APAR @BA58600
.*** ***** WSQUAMEM MUST IMMEDIATELY FOLLOW WS DELETED BY APAR @BA58600
.*** WSQUAMEM DS    XL(QUAMLENG)        QUAMEM DELETED BY APAR @BA58600
.*** ***** WSQUAUST MUST IMMEDIATELY FOLLOW WS DELETED BY APAR @BA58600
.*** WS                                                        @BA58600
.*** WSQUAUST DS    XL(32)              USTATE DELETED BY APAR @BA58600
.***          ORG   WSQUAUST            OVERLA DELETED BY APAR @BA58600
.*** *** WS                                                    @BA58600
.*** WSMCNTL  DS    XL(32)              XCF ME DELETED BY APAR @BA58600
.*** WSIXCPL  DS    0F                  PARAME DELETED BY APAR @BA58600
.***          IXCMSGO  PLISTVER=1,MF=(L,WSMSGO DELETED BY APAR @BA58600
.***                                    IXCMSG DELETED BY APAR @BA58600
.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600
.***          IXCMSGI  PLISTVER=1,MF=(L,WSMSGI DELETED BY APAR @BA58600
.***                                    IXCMSG DELETED BY APAR @BA58600
.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600
.***          IXCQUERY MF=(L,WSQURYPL)  PARAME DELETED BY APAR @BA58600
.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600
.***          IXCJOIN MF=(L,WSJOINPL)   PARAME DELETED BY APAR @BA58600
.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600
.***          IXCLEAVE MF=(L,WSLEAVPL)  PARAME DELETED BY APAR @BA58600
.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600
.***          IXCSETUS MF=(L,WSSTUSPL)  PARAME DELETED BY APAR @BA58600
.***          ORG   ,                   RESET  DELETED BY APAR @BA58600
.*** * LEVEL 3 STORAGE AREAS                   DELETED BY APAR @BA58600
.*** WSSRBPSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSSRBPS2 DS    XL(4*(1+16+RD-RF))  REGIST DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** *   SRB CODE MAY NEED ACCESS TO THE SRB P DELETED BY APAR @BA58600
.*** *   WHICH IS IN REGISTER 10, SO WSSRBPS2  DELETED BY APAR @BA58600
.*** *   REFERENCE DIRECTLY TO REGISTER 10.    DELETED BY APAR @BA58600
.***          ORG   WSSRBPS2            OVERLA DELETED BY APAR @BA58600
.***          DS    XL(4*(1+16+R9-RF))  REGIST DELETED BY APAR @BA58600
.*** WSSRBPAD DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600
.***          ORG   WSSRBPSV                   DELETED BY APAR @BA58600
.*** WSSWMVCS DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600
.*** *** WSSWMVCS DS    (1+RD-RD)F             DELETED BY APAR @BA58600
.*** WSBUFTYP DS    X                   BUFFER DELETED BY APAR @BA58600
.*** LACB_BUFFTYPE EQU  0               LACB Q DELETED BY APAR @BA58600
.*** JSB_BUFFTYPE  EQU  4               JSB QU DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSSWSTAT DS    X                   SWITCH DELETED BY APAR @BA58600
.*** WSSWSTEL EQU   X'80'               HAVE C DELETED BY APAR @BA58600
.*** WSSWSTAP EQU   X'40'               HAVE A DELETED BY APAR @BA58600
.***          ORG   ,                   RESET  DELETED BY APAR @BA58600
.*** * LEVEL 4 STORAGE AREAS (LONGEST LIFE-TIM DELETED BY APAR @BA58600
.***          ORG   ,                   RESET  DELETED BY APAR @BA58600
.*** WSSRBEND DS    0F                         DELETED BY APAR @BA58600
.*** WSSRBLEN EQU   WSSRBEND-IRSVCFDS   LENGTH DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** * SOME FAIRLY LONG-LIVED AREAS NEEDING FU DELETED BY APAR @BA58600
.***          ORG   WSSRBPSV            OVERLA DELETED BY APAR @BA58600
.*** WSTIDYSV DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSTIDYS1 DS    F                   REGIST DELETED BY APAR @BA58600
.*** WSADDWK  DS    F                   IRADD  DELETED BY APAR @BA58600
.*** WSROLCNT DS    F                   IRROLC DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSCLSV   DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSCLS1   DS    F                   REGIST DELETED BY APAR @BA58600
.*** WSCLS2   DS    F                   REGIST DELETED BY APAR @BA58600
.*** *                                  2ND LE DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.*** WSEOCSV  DS    0F                  SAVE A DELETED BY APAR @BA58600
.*** WSEOCPL  DS    F                   SVC PA DELETED BY APAR @BA58600
.*** WSEOSASP DS    F                   SUBPOO DELETED BY APAR @BA58600
.*** WSXMWORK DS    XL(4*3)             XM WOR DELETED BY APAR @BA58600
.*** WSENQLST DS    0F                  ENQ RE DELETED BY APAR @BA58600
.***          DS    AL1                 LISTEN DELETED BY APAR @BA58600
.***          DS    AL1                 RNAME  DELETED BY APAR @BA58600
.***          DS    BL1                 OPTION DELETED BY APAR @BA58600
.***          DS    AL1                 RETURN DELETED BY APAR @BA58600
.*** WSXMQNAM DS    A                   ADDRES DELETED BY APAR @BA58600
.*** WSRNAME  DS    A                   ADDRES DELETED BY APAR @BA58600
.***          DS    0F                  FULL W DELETED BY APAR @BA58600
.*** WSAPPLID DS    CL8                 APPLID DELETED BY APAR @BA58600
.***          ORG   WSAPPLID            OVERLA DELETED BY APAR @BA58600
.*** WSMEMNAM DS    CL16                MEMBER DELETED BY APAR @BA58600
.*** WSUSKEY  DS    C                   EXTRA  DELETED BY APAR @BA58600
.***          ORG   *-1                 OVERLA DELETED BY APAR @BA58600
.*** WSMEMDAT DS    2F                  MEMBER DELETED BY APAR @BA58600
.*** WSIRRX_INSTANCE DS F               XCR RE DELETED BY APAR @BA58600
.*** WSSWRSV  DS    F                   RETURN DELETED BY APAR @BA58600
.*** WSTOD    DS    D                   AREA F DELETED BY APAR @BA58600
.***                                    SUPPRE DELETED BY APAR @BA58600
.*** ****** NEED TO SEE WHICH OF THESE AREAS C DELETED BY APAR @BA58600
.*** WSS                                                       @BA58600
.*** WSMEPL   DS    XL(MEPLLEN)         COPY O DELETED BY APAR @BA58600
.***                                    MESSAG DELETED BY APAR @BA58600
.*** WSMQEP   DS    A                   POINTE DELETED BY APAR @BA58600
.***                                    ELEMEN DELETED BY APAR @BA58600
.*** WSGXPSV  DS    XL(4*(1+RD-RD))     RD SAV DELETED BY APAR @BA58600
.*** WSMXRPAP DS    A                   POINTE DELETED BY APAR @BA58600
.***                                    PARAME DELETED BY APAR @BA58600
.*** WSLCLAD  DS    A                   ADDRES DELETED BY APAR @BA58600
.*** WSLCLLN  DS    F                   LENGTH DELETED BY APAR @BA58600
.*** WSEND    DS    0D                  MAKE L DELETED BY APAR @BA58600
.*** WSLEN    EQU   WSEND-IRSVCFDS      LENGTH DELETED BY APAR @BA58600
.*** WSMXLEN  EQU   *-IRSVCFDS          LENGTH DELETED BY APAR @BA58600
.***          SPACE 1                          DELETED BY APAR @BA58600
.***          DFHEJECT  ,                      DELETED BY APAR @BA58600
.*** ***************************************** DELETED BY APAR @BA58600
.*** * *                                       DELETED BY APAR @BA58600
.*** * *        SRB WORK AREA                  DELETED BY APAR @BA58600
.*** * *                                       DELETED BY APAR @BA58600
.*** * *      A WORK AREA IS ACQUIRED AT LOGON DELETED BY APAR @BA58600
.*** * *      THE STORAGE OF REGISTERS FOR SUB DELETED BY APAR @BA58600
.*** * *      IT IS RELEASED IN TIDY, OR IF TH DELETED BY APAR @BA58600
.*** ***************************************** DELETED BY APAR @BA58600
.***          SPACE 2                          DELETED BY APAR @BA58600
.*** IRSRBSEC DSECT  ,                         DELETED BY APAR @BA58600
.*** SRBWKA   DS    CL(WSEND-IRSVCFDS)         DELETED BY APAR @BA58600
.*** IRSRBEND DS    0F                         DELETED BY APAR @BA58600
.*** IRSRBSIZ EQU   IRSRBEND-IRSRBSEC          DELETED BY APAR @BA58600
.***          DFHEJECT  ,                      DELETED BY APAR @BA58600
***********************************************************************
* * *                                                             * * *
* * *          USE COUNT ARRAY                                    * * *
* * *                                                             * * *
* * *   THE PREFIX TO THE ARRAY CONTAINS THE LINKAGE INDEX        * * *
* * *   AND ENTRY TABLE TOKEN.                                    * * *
* * *   THE USE COUNT ARRAY CONTAINS A RECORD OF THE NUMBER OF    * * *
* * *   ACTIVE CONNECTIONS USING A PARTICULAR AX VALUE            * * *
* * *     SINCE A USE COUNT INDEX OF ZERO IS REGARDED AS INVALID  * * *
* * *   THE USE COUNT ARRAY BEGINS WITH THE ENTRY FOR INDEX = 1.  * * *
* * *   TO ALLOW THE INDEX TO BE USED DIRECTLY THE VALUE UCAPRELN * * *
* * *   IS SET TO THE LENGTH OF THE PREFIX - 4.                   * * *
* * *   THE TRUE PREFIX LENGTH IS GIVEN BY THE VALUE UCATPREL.    * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                           @FJ410R @L2A
UCA      DSECT  ,                                          @FJ410R @L2A
UCALENTH DS    H              TOTAL LENGTH OF USE COUNT    @FJ410R @L2A
*                             ARRAY FOR FORMATTED DUMP
         DS    H                   Reserved                @FJ410R @L8C
UCAPREND DS    0F                                          @FJ410R @L2A
UCAPRELN EQU   UCAPREND-UCA-UCAELEN  PREFIX LENGTH FOR INDEX TO UCAE   F
                                                           @FJ410R @L8C
UCATPREL EQU   UCAPREND-UCA        TRUE PREFIX LENGTH      @FJ410R @L2A
         SPACE 5                                           @FJ410R @L2A
***********************************************************************
* * *                                                             * * *
* * *          USE COUNT ARRAY ENTRY                              * * *
* * *                                                             * * *
* * *   EACH ENTRY IN THE USE COUNT ARRAY CONSISTS OF THE NUMBER  * * *
* * *   OF ACTIVE CONNECTIONS USING THE AX VALUE AT THE SAME      * * *
* * *   OFFSET IN THE AX ARRAY.                                   * * *
* * *                                                             * * *
***********************************************************************
         SPACE 2                                           @FJ410R @L2A
UCAE     DSECT  ,                                          @FJ410R @L2A
UCAECNT  DS    H                   USE COUNT               @FJ410R @L2A
UCAEXMLG DS    H                   LG of XM-resource owning LACBE  @L8A
UCAELEN  EQU   *-UCAE              ENTRY  LENGTH           @FJ410R @L2A
         DFHEJECT ,                                                @L8A
* XCF User State Data                                              @L8A
USTATE   DSECT                     User State data for XCF         @L8A
USTVER#  DS    AL1                 User State Data Version Number  @L8A
USTVER#1 EQU   1                   User State Data Version No. @BA58600
USTVER#2 EQU   2                   User State Data Version No. @BA58600
USTPRTCL DS    AL1                 Communication Protocol Number   @L8A
PRTCL1   EQU   1                   Protocol Number 1           @BA58600
USTSTAT0 DS    AL1                 Reserved for Status expansio@BA58600
USTSTAT1 DS    AL1                 Status                      @BA58600
USTSTACT EQU   1                   Member is active & not quiesced @L8A
USTSTRDY EQU   2                   Member is ready for CONNECTs    @L8A
USTSTNQU EQU   3                   Member is in NORMAL QUIESCE     @L8A
USTSTIQU EQU   4                   Member is in IMMEDIATE QUIESCE  @L8A
USTSTNSD EQU   5                   Member is terminating normally  @L8A
USTSTABE EQU   6                   Member is terminating abnormally@L8A
USTST1M1 EQU   B'00000111'         Mask to isolate USTSTAT1 bits in    X
                                   Version 2 User State Data which are X
                                   meaningful to a Protocol 1 u@BA58600
USTTOKEN DS    F                   Token to allow an IRP user to find  X
                                   out whether it is the current user  X
                                   of a given XCF member name      @L8A
USTXAPPL EQU   X'80'               User's APPLID is present    @BA58600
USTTOD   DS    XL8                 User State Data time-stamp  @BA58600
USTAPPLD DS    CL8                 User's APPLID                   @L8A
.*** USTUSRID DS    CL8                 USER'S DELETED BY APAR @BA58600
USTATEL  EQU   *-USTATE            Length of User State data       @L8A
         DS    0S(32-USTATEL)      Assembly error if Length > 32   @L8A
         SPACE 3
         IXCYGEPL                  Group Exit Parameter List       @L8A
         IXCYMEPL                  Message Exit Parameter List     @L8A
***********************************************************************
*        XCF Message Control Data                                     *
***********************************************************************
MEPL     DSECT                     Continue the MEPL DSECT         @L8A
         ORG   MEPLMTOK            Overlay the Message Token       @L8A
MQENEXT  DS    A                   Pointer to next Message Queue       X
                                   Element                         @L8A
         ORG   MEPLMDAT            Overlay the Member Data         @L8A
MQEDATA  DS    A                   Pointer to first data buffer    @L8A
MQEDLAST DS    A                   Pointer to last data buffer     @L8A
         ORG   MEPLCNTL            Overlay the Message Control Data@L8A
MCNTL    EQU   *                   Message Control Data for XCF    @L8A
MCPRTCL  DS    AL1                 Communication Protocol Number   @L8A
MCFUNC   DS    AL1                 Function code                   @L8A
         SPACE 1
MCFCONN  EQU   X'10'               Function - Connect              @L8A
MCFDISC  EQU   X'20'               Function - Disconnect           @L8A
MCFSWIT  EQU   X'30'               Function - Switch               @L8A
MCFQUSC  EQU   X'40'               Function - Quiesce              @L8A
MCFRESET EQU   X'00'               Function - Immediate Reset      @L8A
         SPACE 1
*              Function qualifiers
MCFQABN  EQU   X'01'               Abnormal - disconnect       @BA58600
MCFQ1ST  EQU   X'01'               First switch                    @L8A
MCFQIMMD EQU   X'01'               Immediate quiesce               @L8A
MCFQUNSL EQU   X'02'               Unsolicited switch              @L8A
.*** MCFQSEG  EQU   X'04'               SEGMEN DELETED BY APAR @BA58600
MCFQFRGT EQU   X'02'               Disconnect - Forget             @L8A
MCFQNAVL EQU   X'04'               Disconnect - Not Available      @L8A
         SPACE 1
MCCC#S   DS    H                   All functions except CONNECT -      X
                                   change counter (for dynamic CHANGE  X
                                   of LCBEs) qualifying sender's CCB   X
                                   pointer MCCCBPS (zero if MCCCBPS is X
                                   not supplied)                   @L8A
MCCCBPS  DS    A                   All functions except CONNECT -      X
                                   pointer to sender's CCB (sometimes  X
                                   zero if no reply is possible)   @L8A
MCCCBPRX EQU   X'80'               If the sign bit of the sender's CCB X
                                   pointer is on, the receiver's CCB   X
                                   pointer & change counter are        X
                                   present; otherwise, the sender's    X
                                   APPLID is present               @L8A
MCMSG#   DS    F                   All functions except CONNECT  -     X
                                   Message number within session   @L8A
         ORG   MCCC#S              CONNECT only                    @L8A
         DS    H                   Reserved                        @L8A
MCSTOD   DS    XL8                 TOD clock reading stored during TCB X
                                   mode CONNECT processing between     X
                                   deciding the target XCF token and   X
                                   issuing the IXCMSGO             @L8A
MCSN#    DS    F                   All functions - session number &    X
                                   originator (primary/secondary flag).X
                                   If sign bit is 0, the sender is the X
                                   secondary and the receiver is the   X
                                   primary; if the sign bit is 1, the  X
                                   sender is the primary.          @L8A
MCAPPLID DS    CL8                 If function is CONNECT or sign bit  X
                                   of sender's CCB pointer (MCCCBPRX)  X
                                   is zero - sender's APPLID       @L8A
         ORG   MCAPPLID            All functions except CONNECT if     X
                                   sign bit of sender's CCB pointer is X
                                   one                             @L8A
         DS    H                   Reserved                        @L8A
MCCC#R   DS    H                   Change counter qualifying           X
                                   receiver's CCB pointer MCCCBPR  @L8A
MCCCBPR  DS    A                   Pointer to receiver's CCB       @L8A
MCUSERID DS    CL8                 CONNECT only - sender's security    X
                                   (RACF) user ID                  @L8A
         ORG   MCUSERID                                            @L8A
MCSSWLEN DS    F                   SWITCH only - length of the         X
                                   complete message            @BA58600
.***                                    MESSAG DELETED BY APAR @BA58600
MCSSWOFF DS    F                   SWITCH only - offset of this        X
                                   segment from start of the complete  X
                                   message - zero unless segmen@BA58600
         ORG   MCUSERID                                            @L8A
MC#1CCBS DS    F                   DISCONNECT qualified by MCFQNAVL    X
                                   only - <= 0 if the sender was not   X
                                   willing at that time to accept any  X
                                   of the receiver's CONNECT requests; X
                                   number of candidate primary CCBs if X
                                   the sender was willing to accept    X
                                   the receiver's CONNECT requests but X
                                   could not find a free primary CCB   X
                                                                   @L8A
         ORG   ,                                                   @L8A
         DS    0S(32-(*-MCNTL))  Assembly error if Length > 32     @L8A
         SPACE 8
* Partner History Block                                            @L8A
PHB      DSECT                   Partner History Block             @L8A
PHBNEXT  DS    A                 Pointer to next PHB in chain      @L8A
PHBMQP   DS    A                 Pointer to queue of messages which    X
                                 cannot yet be assigned to CCBs        X
                                 because the incoming CONNECT has not  X
                                 been processed                    @L8A
PHBS#HCP DS    A                 Pointer to chain of elements (S#HEs)  X
                                 listing the incoming session numbers  X
                                 that have been handled so far for     X
                                 this partner                      @L8A
PHBLCBE  DS    A                 Pointer to owning LCBE or to LCB      X
                                 (& sign bit) if PHB is chained from   X
                                 LCB                               @L8A
         DS    0D                Align for CDS                     @L8A
PHBAPCNT DS    F                 Active Process Count - a partner      X
                                 state of "active" or a non-empty      X
                                 message queue each contribute to this X
                                 count too                         @L8A
PHBCNCNT DS    F                 Connection Count                  @L8A
PHB2CNCT DS    F                 Count of secondary connections    @L8A
PHBMVSID DS    XL4               Partner's MVS system token        @L8A
PHBMVSNM DS    CL8               Partner's MVS system name - for       X
                                 diagnostic use only               @L8A
PHBMEMTK DS    XL8               Partner's XCF member token        @L8A
PHBSTTOD DS    XL8               Time-stamp for PHBSTATE value     @L8A
PHBSTATE DS    C                 Partner's User State Status1      @L8A
PHBS0CSC DS    F                 Cumulative session counter value      X
                                 corresponding to session 0 with this  X
                                 partner                           @L8A
         DS    0D                Align to double-word multiple     @L8A
PHBLEN   EQU   *-PHB             Length of PHB                     @L8A
PHBAQLOC EQU   0                 "Locate only" function code IRPHBACQ  X
                                                                   @L8A
PHBAQCRE EQU   1                 "Locate or Create" function code for  X
                                 IRPHBACQ                          @L8A
         SPACE 8
* Session numbers handled element                                  @L8A
S#HE     DSECT                   Session numbers handled element   @L8A
S#HENEXT DS    A                 Pointer to next S#HE in the chain @L8A
S#HERNGE EQU   X'80'             If the sign bit of S#HENEXT is 0,     X
                                 the element contains a bit string     X
                                 representing individual session       X
                                 numbers.  If the sign bit is 1, the   X
                                 element contains upper and lower      X
                                 bounds of a range of session numbers  X
                                                                   @L8A
S#HEHIGH DS    0F                One more than the highest session no. X
                                 within the range if S#HERNGE is on -  X
                                 must be next word after S#HENEXT  @L8A
S#HEBITS DS    BL.64             Bit string representing individual    X
                                 session numbers starting with the     X
                                 lowest if element does not refer to a X
                                 range                             @L8A
S#HELOW  DS    F                 Lowest session number represented by  X
                                 this element                      @L8A
         DS    0D                  Make length a multiple of 8     @L8A
S#HELEN  EQU   *-S#HE            Length of S#HE                    @L8A
S#HMLOC  EQU   0                 IRS#HMGR function code for LOCATE @L8A
S#HMADD  EQU   1                 IRS#HMGR function code for ADD    @L8A
.***          SPACE 8                          DELETED BY APAR @BA58600
.***          DFHEJECT ,                       DELETED BY APAR @BA58600
.*** *                                         DELETED BY APAR @BA58600
.*** *  FESTAE PARAMETER LIST                  DELETED BY APAR @BA58600
.*** *                                         DELETED BY APAR @BA58600
.*** *   THIS PARAMETER LIST IS BUILT IN THE R DELETED BY APAR @BA58600
.*** *   SVRB BELONGING TO THE IRP SVC.  IT IS DELETED BY APAR @BA58600
.*** *   BETWEEN THE IRP MAINLINE AND THE FEST DELETED BY APAR @BA58600
.*** *   THE PARAMETER LIST IS RESTRICTED TO T DELETED BY APAR @BA58600
.*** *   WHICH IS 24 BYTES.                    DELETED BY APAR @BA58600
.*** *                                         DELETED BY APAR @BA58600
.*** MXRPA    DSECT ,                   MESSAG DELETED BY APAR @BA58600
.*** MXRPASV  DS    (1+16+R1-RD)F       SAVE A DELETED BY APAR @BA58600
.*** MXRPAWSP DS    A                   POINTE DELETED BY APAR @BA58600
.***          DS    0S(24-(*-MXRPA))    ASSEMB DELETED BY APAR @BA58600
         DFHEJECT ,                                                @LAA
*
* XCF retry SRB work element
*
* When an XCFBUSY condition occurs a work element is built to pass
* to the XCF retry SRB to cuase the request that raised the XCFBUSY
* condition to be retried.
*
IRRX_ELEM     DSECT  ,                                             @LAA
IRRX_FWD      DS    A     forward chain (public)                   @LAA
IRRX_BWD      DS    A     backward chain (private)                 @LAA
IRRX_FUNCTION DS    X     request type                             @LAA
IRRX_DUMMY            EQU 0                                        @LAA
IRRX_MSG_DATA         EQU 1                                        @LAA
IRRX_MSG_NODATA       EQU 2                                        @LAA
IRRX_QUIESCE_COMPLETE EQU 3                                        @LAA
IRRX_RESP     DS    X     response from last msgo attempt          @LAA
IRRX_REASN    DS    H     reason from last msgo attempt            @LAA
IRRX_RETRY    DS    H     message retry count                      @LAA
IRRX_NUMBUSY  DS    H     XCFBUSY count                            @LAA
IRRX_INSTANCE DS    A     last SRB instance to retry this message  @LAA
IRRX_BUFFER   DS    A     Data buffer chain addr or 0              @LAA
IRRX_TARGET   DS    CL8   target XCF member token                  @LAA
IRRX_MSGCNTL  DS    CL32  message control area                     @LAA
              DS    0D                                             @LAA
IRRX_LEN      EQU   *-IRRX_ELEM                                    @LAA
*
* R15 return codes for DFHIRRXS routines
*
IRRXERR       EQU   8                                              @LAA
*
* R0 reason codes corresponding to IRRXERR
*
IRRXERR_DISABLED        EQU 4                                      @LAA
IRRXERR_GETMAIN_FAILED  EQU 8                                      @LAA
IRRXERR_XCF_ERROR       EQU 16                                     @LAA
IRRXERR_INVALID_FUNCTION EQU 20                                    @LAA
IRRXERR_LOCKERR1    EQU 24   SRB dispatched without LCB LOCK       @LAA
IRRXERR_LOCKERR2    EQU 28   SRB dispatched with LCB lock disabled @LAA
IRRXERR_LOCKERR3    EQU 32   SRB dispatched while TQE enqueued     @LAA
IRRXERR_LOCKERR4    EQU 36   SRB instance number mismatch          @LAA
         MEND                                                      @P3M
