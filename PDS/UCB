        PRINT ON,GEN
********U C B********TSO VERSION*******************
**FORMAT:  UCB  VOLSER    - WILL RETURN UCB ADDRESS
**FORMAT:  UCB  UCBADDR   - WILL RETURN VOLSER
****
**THIS PROGRAM RETURNS A VOLSER IF A UCB ADDRESS IS ENTERED OR
**A UCB ADDRESS IF A VOLSER IS PASSED.  FIXED FOR 4-DIGIT UCB'S.
*****DEPENDENCIES
**THIS PROGRAM NO LONGER NEEDS AN SVC TO GET AUTHORIZATION.
**YOU CAN AUTHORIZE IT IN THE IKJEFTE2 (AUTHCMD) LIST OF PROGRAM
**NAMES, LINKEDIT IT SETCODE AC(1) AND IT SHOULD NOW WORK, IF
**IT IS RUN FROM AN AUTHORIZED LIBRARY.  YOU CAN STILL HOOK UP
**THE SVC CODE THAT IS IN MEMBER UCBOLD, IF YOU WANT TO.
*
**THE PROGRAM MAY BE RUN FROM LINKLIST OR CALLED FROM A CLIST.
**IT NOW SEEMS TO WORK FINE WHEN CALLED FROM A CLIST.
* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R5,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R5,HEX
         L     R5,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
***REGISTERS******
BASEREG  EQU   11
LINKREG  EQU   8
UCBREG   EQU   1
CVTREG   EQU   2
RET      EQU   10
TABREG   EQU   15
****************************
         CVT DSECT=YES,LIST=YES
UCB      DSECT
         IEFUCBOB LIST=YES,PREFIX=NO
         IEFZB4D0
         IEFZB4D2
         YREGS
         EJECT
TSOUCB   CSECT
         USING *,R15
         STM   R14,R12,12(R13)
         ST    R13,SAVEMAIN+8
         LA    R13,SAVEMAIN
         LR    R11,R15
         USING TSOUCB,R11
         DROP  R15
         ST    R1,SAVEMAIN
         MVI   BLANKS-1,X'40'
         MVC   BLANKS,BLANKS-1
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         TM    0(R1),X'80'        CHECK FOR INVOKED AS A PROGRAM
         BO    PGM
         TM    4(R1),X'80'        CHECK FOR INVOKED AS A PROGRAM
         BZ    CMD
PGM      L     R1,0(,R1)          ADDRESS OF PARM LIST
         LH    R4,0(,R1)          LENGTH OF PARM FIELD
         LTR   R4,R4              IF LENGTH ZERO
         BZ    ENDITR               NO  PARM
         STH   R4,ULEN
         LA    R3,2(,R1)          ADDRESS OF PARM CHARS
         B     GOTIT
CMD      L     R1,0(,R1)          ADDRESS OF CBUF
         LH    R4,0(,R1)          GET CBUF LENGTH
         SH    R4,=H'4'           MINUS LENGTH OF 2 HALFWORDS
         SH    R4,2(,R1)          MINUS OFFSET TO OPERAND
         BZ    ENDITR             IF ZERO, NO OPERAND
         AH    R1,2(,R1)          POINT TO OPERAND MINUS 4
         LA    R3,4(,R1)          POINT TO OPERAND
         STH   R4,ULEN
GOTIT    EQU   *
         LR    R1,R3
         LR    R0,R4
*        SVC   93 TPUT             SHOW PARM BEFORE VALIDATION
         CH    R4,=H'6'            IF MORE THAN 6 CHARS
         BH    ENDITR                EXIT
         CH    R4,=H'3'            IF LESS THAN 3 CHARS
         BL    ENDITR                EXIT
         MVI   PRM000-1,X'40'
         MVC   PRM000,PRM000-1
         LR    R15,R4
         BCTR  R15,0
         B     *+10
         MVC   PRM(0),0(R3)
         EX    R15,*-6             MOVE PARM
         L     R15,=A(CONVTAB)     CONVERT LOWER CASE TO UPPER CASE
         TR    PRM,0(R15)
         CH    R4,=H'4'            IF MORE THAN 4 CHARS
         BH    VOL                   IT'S A VOLSER, NOT A UNIT ADDRESS
         LR    R15,R4
         BCTR  R15,0               LENGTH MINUS 1
         B     *+10
         TRT   PRM(0),HEXTRT       ONLY HEX CHARS OK
         EX    R15,*-6
         BNZ   ENDITR
         CH    R4,=H'3'
         BNE   NOT3
         MVC   WORK4(3),PRM        PREFIX 3-CHARACTER UNIT ADDRESS
         MVI   PRM,C'0'              WITH '0'
         MVC   PRM+1(3),WORK4
         LA    R4,4
NOT3     EQU   *
         LA    R1,PRM
         LR    R0,R4
*        SVC   93 TPUT             SHOW UNIT ADDRESS AFTER VALIDATION
         B     OPENO
VOL      LR    R15,R4
         BCTR  R15,0               LENGTH MINUS 1
         B     *+10
         TRT   PRM(0),TRANTAB      ONLY ALPHANUM OK
         EX    R15,*-6
         BNZ   ENDITR
         LA    R1,PRM
         LR    R0,R4
*        SVC   93 TPUT             SHOW VOLSER AFTER VALIDATION
OPENO    MVI   RUNSW,UCBAD
         CH    R4,=H'4'
         BNH   *+8
         MVI   RUNSW,VOLSER
***ALLOCATE AND OPEN OUTPUT FILE
         L     R8,=A(ALLOCOUT)
         BALR  R10,R8
         OPEN  (OUTPUT,OUTPUT)
***MUST BE AUTHORIZED TO USE UCBLOOK
         L     R8,=A(AUTHIT)
         BALR  R10,R8
*****FOR DYNAMIC UCBS, USE UCBLOOK MACRO
         USING UCB,R1
         TM    RUNSW,VOLSER    VOLSER CHECK
         BO    VOLLOOK
UL  UCBLOOK NOPIN,DEVNCHAR=PRM,DYNAMIC=YES,UCBPTR=RETUCBA,             +
               LOC=ANY,RANGE=ALL
         LTR   R15,R15
         BNZ   PUTITR
         L     R1,RETUCBA
         TAM                       TEST FOR AMODE 24/31/64
         BNZ   NOT24U
         SAM31
         MVC   COPYUCB(36),0(R1)
         LA    R1,COPYUCB
         SAM24
NOT24U   EQU   *
         TM    UCBTBYT3,UCB3DACC   CHECK FOR DASD
         BO    OKDASD
         MVC   RESULT(8),=C'NON-DASD'
         B     PUTIT
OKDASD   EQU   *
         TM    UCBSTAT,UCBONLI     CHECK FOR ONLINE
         BO    OKONLI
         MVC   RESULT(7),=C'OFFLINE'
         B     PUTIT
OKONLI   EQU   *
         MVC   RESULT(L'UCBVOLI),UCBVOLI
         B     PUTIT
VOLLOOK  DS    0H
VL  UCBLOOK NOPIN,VOLSER=PRM,DYNAMIC=YES,UCBPTR=RETUCBA,               +
               LOC=ANY,RANGE=ALL
         LTR   R15,R15
         BNZ   PUTITR
         L     R1,RETUCBA
*        MVC   RESULT(L'UCBNAME),UCBNAME
         TAM                       TEST FOR AMODE 24/31/64
         BNZ   NOT24V
         SAM31
         MVC   COPYUCB(36),0(R1)
         LA    R1,COPYUCB
         SAM24
NOT24V   EQU   *
         UNPK  RESULT(5),UCBCHAN(3)  GET UNIT ADDRESS
         TR    RESULT(4),HEXTAB-240  TO 4-BYTE HEX
         MVI   RESULT+4,C' '
         B     PUTIT
******************************************
*        L     R2,16         CVT POINTER
*        USING CVT,R2
*        L     R1,CVTUCBA    FIRST UCB
*        USING UCB,R1
*        DROP   R2
*        B     FINDIT
*NEXTUCB DS    0H
*        L     R1,UCBNXUCB
*FINDIT  DS    0H
*        CLI   UCBID,UCBSTND
*        BNE   PUTIT
*        TM    RUNSW,VOLSER  VOL SER  GIVEN?
*        BNO   TESTUCB
*        CLC   UCBVOLI,PRM
*        BNE   NEXTUCB
*        MVC   RESULT(L'UCBNAME),UCBNAME
*        B     PUTIT
*TESTUCB DS    0H
*        CLC   UCBNAME,PRM
*        BNE   NEXTUCB
*        MVC   RESULT(L'UCBVOLI),UCBVOLI
*        B     PUTIT
PUTITR   CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
*        UNPK  RESULT+20(5),DOUBLE+5(3) SHOW RETURN CODE
PUTIT    DS    0H
         CLI   RESULT,C' '
         BNE   *+10
         MVC   RESULT(10),=CL10'NOT FOUND'
         PUT   OUTPUT,OUTLINE
*        TPUT  OUTLINE,30
         B     ENDIT
ENDIT    DS    0H
         MODESET KEY=NZERO,MODE=PROB
ENDITXX  DS    0H
         CLOSE OUTPUT
ENDITR   EQU   *
         L     R13,SAVEMAIN+8
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
MOVEIT   MVC   PRM(0),2(1)   MOVE COMMAND FROM PARM AREA
*
SAVEMAIN DS    18F
SAVE1401 DS    6F
RETUCBA  DS    F
WORK4    DS    F
DOUBLE   DS    D
COPYUCB  DS    9F
         DS    C
BLANKS   DC    CL40' '
ULEN     DS    H
         DC    C' '
OUTLINE  DC    CL80' '
         ORG   OUTLINE+1
PRM000   DS    0CL8
PRMP     DC    C' '
PRM      DC    CL6' '
         DC    C' '
RESULT   DS    0C
         ORG
RUNSW    DC    X'00'
UCBAD    EQU   X'01'
VOLSER   EQU   X'02'
OUTPUT   DCB   DDNAME=TERMFILP,DSORG=PS,MACRF=PM,RECFM=FA,             XJRE06080
               LRECL=080,BLKSIZE=080
         LTORG
         EJECT
ALLOCOUT DS    0H
         USING *,R8
         STM   R14,R12,ALCSAVE+12
         LA    1,RBPOINT     (R1 => A(REQ BLOCK )
         DYNALLOC
         LM    R14,R12,ALCSAVE+12
         BR    R10
         DS    0F
ALCSAVE  DS    18F
DYNBLKS  EQU   *
RBPOINT  DC    A(RBS)        ADR  REQ BLOCK PASSED IN R1
         ORG   RBPOINT       S99RBP  DSECT
         DC    X'80'         HI ORDER BIT MUST BE ON
         ORG
         DS    0F
RBS      EQU   *
RB       DS    0CL20         S99RB DSECT  LOC BY RBPOINT
RBLN     DC    AL1(RBEL)     LEN OF RB
RBVERB   DC    AL1(S99VRBAL) FUNC 01-07 01 FOR ALLOC
RBFLAG1  DC    AL1(S99NOMNT) FLAG BYTE-DONT CONSIDER OFFLINE UNITS
RBFLAG2  DS    X       2ND   FLAG BYTE
RBERROR  DS    XL2     ERROR REASON CODE
RBINFO   DS    XL2     INFO  REASON CODE
RBTXTPP  DC    A(TXPOINTS)     LIST OF TEXT PTRS
         DS    F             RESERVED
RBAUTHFL DS    XL4           FLAGS FOR AUTH FUNCTIONS
RBEL     EQU   *-RB
**TEXT UNIT POINTERS
TXPOINTS DS    0F            S99TUPL  DSECT  TU PTR LIST
DDNPOINT DC    A(DDNTEXT)
SYSPOINT DC    A(SYSOTEXT)
TERPOINT DC    A(TERMTEXT)
         ORG   TERPOINT
         DC    X'80'            LAST TEXT UNIT
         ORG
TXUNITS  DS    0F               S99TUNIT DSECT  TEXT UNITS
**DDN TEXT UNIT
DDNTEXT  DS    0F               DDN TEXT UNIT
DDNTXKEY DC    AL2(DALDDNAM)    KEY FOR DDN TEXT
DDNTXNUM DC    XL2'0001'        NUM LENGTH + PARM ENTRIES
DDNTXENT DS    0C
DDNPLEN  DC    AL2(L'DDNTXPRM)  LENGTH OF PARM
DDNTXPRM DC    CL8'TERMFILP'
SYSOTEXT  DS   0F
SYSOXKEY DC    AL2(DALSYSOU)    KEY FOR SYSOUT ALLOC
SYSOXNUM DC    XL2'0001'        NUM LENGTH + PARM ENTRIES
SYSOXENT DS    0C
SYSOLEN  DC    AL2(L'SYSOXPRM)  LENGTH OF PARM
SYSOXPRM DC    C'A'             MUST BE 1
TERMTEXT DS    0F               OMITTED
TERMXKEY DC    AL2(DALTERM)     KEY FOR TERM=TS
TERMXNUM DC    XL2'0000'        NUM LENGTH + PARM ENTRIES
TERMXENT DS    0C
TERPLEN  DC    AL2(L'TERTXPRM)  LENGTH OF PARM
TERTXPRM DS    0C               NO PARM
         DC    CL6' '           FOR PATCHING
TXLEN    EQU   *-TXUNITS
DYNEL    EQU  *-DYNBLKS
RBLEN  EQU  (S99RBEND-S99RB)
         LTORG
         DROP  R8
         EJECT
AUTHIT   DS    0H
         USING *,R8
******FOR TSO
***USE SVC 241 TO GET AUTH R4=TCB, R0=1 OR 0 FOR ON/OFF, R1='AUTH'
***SVC USES TCB PROPER+B4 TO GET JSCB ADDR
         STM   R15,R1,SAVE1401     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.
         B     AUTHGO
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NOTAUTH  DS    0H
         STM   R15,R1,SAVE1401     Now save registers and test if APF
         MVI   OUTLINE-1,X'40'
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(22),=C'COMMAND NOT AUTHORIZED'
         PUT   OUTPUT,OUTLINE
*        TPUT  OUTLINE,30
         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.
         B     ENDITXX             Get out without doing MODESET
AUTHGO   DS    0H
         MODESET KEY=ZERO,MODE=SUP
         BR    R10
LINKSAVE DS    18F
         LTORG
         EJECT
TRANTAB  DS    0H
         USING *,R15
TRTTAB   DC    256X'FF'     ALPHA CHARS GO IN AS LOWER CASE
         ORG   TRTTAB+X'81'
         DC    9X'00'   A-I
         ORG   TRTTAB+X'91'
         DC    9X'00'   J-R
         ORG   TRTTAB+X'A2'
         DC    8X'00'   S-Z
         ORG   TRTTAB+C'A'
         DC    9X'00'   A-I
         ORG   TRTTAB+C'J'
         DC    9X'00'   J-R
         ORG   TRTTAB+C'S'
         DC    8X'00'   S-Z
         ORG   TRTTAB+C'0'
         DC    10X'00'  0-9
         ORG
HEXTRT   DC    256X'FF'
         ORG   HEXTRT+X'81'
         DC    9X'00'   A-F LOWER
         ORG   HEXTRT+X'C1'
         DC    9X'00'   A-F CAPS
         ORG   HEXTRT+X'F0'
         DC    10X'00'  0-9
         ORG
         LTORG
         DROP  R15
CONVTAB  DS    0H           TRANSLATE LOWER CASE TO UPPER CASE
         USING *,R15
CNVTAB   DC    256AL1(*-CNVTAB)
         ORG   CNVTAB+X'81'
         DC    C'ABCDEFGHI'
         ORG   CNVTAB+X'91'
         DC    C'JKLMNOPQR'
         ORG   CNVTAB+X'A2'
         DC    C'STUVWXYZ'
         ORG
HEXSAVE  DS    3F
SAV4HEX  DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H                    HEX DISPLAY ROUTINE - KEEP IN
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R5                    RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* --------------------------------------------------------- *
         LTORG
         DROP  R15
         END
